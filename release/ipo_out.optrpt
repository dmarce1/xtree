
Begin optimization report for: exafmm_kernel<1L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(57,12) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 104 
   remark #15477: vector loop cost: 81.000 
   remark #15478: estimated potential speedup: 4.400 
   remark #15479: lightweight vector operations: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(57,12) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 4.180 
   remark #15479: lightweight vector operations: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(119,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,7) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(119,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1296 
   remark #15477: vector loop cost: 260.500 
   remark #15478: estimated potential speedup: 4.960 
   remark #15479: lightweight vector operations: 222 
   remark #15482: vectorized math library calls: 7 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15315: loop was not vectorized: low trip count
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 192.000 
            remark #15478: estimated potential speedup: 0.190 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 12 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1854 
   remark #15477: vector loop cost: 381.500 
   remark #15478: estimated potential speedup: 4.840 
   remark #15479: lightweight vector operations: 386 
   remark #15482: vectorized math library calls: 9 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 20 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2536 
   remark #15477: vector loop cost: 532.250 
   remark #15478: estimated potential speedup: 4.750 
   remark #15479: lightweight vector operations: 599 
   remark #15482: vectorized math library calls: 11 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 42 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4269 
   remark #15477: vector loop cost: 923.000 
   remark #15478: estimated potential speedup: 4.600 
   remark #15479: lightweight vector operations: 1172 
   remark #15482: vectorized math library calls: 15 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 56 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5321 
   remark #15477: vector loop cost: 1163.000 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 1532 
   remark #15482: vectorized math library calls: 17 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(107,41)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(107,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(115,45)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(115,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::unknown_exception::~unknown_exception(boost::unknown_exception *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(178,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::unknown_exception::~unknown_exception(boost::unknown_exception *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(176,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::section::~section(hpx::util::section *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/ini.hpp(70,21)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/ini.hpp(70,21)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_type, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type, std::_Select1st<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type>, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_compare, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_type, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type, std::_Select1st<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type>, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_compare, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_type, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type, std::_Select1st<std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::value_type>, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::key_compare, std::map<std::string, hpx::util::section, std::less<std::string>, std::allocator<std::pair<const std::string, hpx::util::section>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_type, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type, std::_Select1st<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type>, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_compare, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_type, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type, std::_Select1st<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type>, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_compare, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_type, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type, std::_Select1st<std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::value_type>, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::key_compare, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::unknown_exception>::~clone_impl(boost::exception_detail::clone_impl<boost::unknown_exception> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::unknown_exception::~unknown_exception(boost::unknown_exception *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(176,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(107,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(115,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::io::basic_altstringbuf<char, std::char_traits<char>, std::allocator<char>>::overflow(boost::io::basic_altstringbuf<char, std::char_traits<char>, std::allocator<char>> *, boost::io::basic_altstringbuf<char, std::char_traits<char>, std::allocator<char>>::int_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/alt_sstream_impl.hpp(252,17)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::str(boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::string_type *, const boost::basic_format<char, std::char_traits<char>, std::allocator<char>> *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(257,29) inlined into /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(228,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between sz.395469 line 263 and sz.395469 line 259
   remark #15346: vector dependence: assumed ANTI dependence between sz.395469 line 259 and sz.395469 line 263
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(230,29)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::~basic_format(boost::basic_format<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/format/format_fwd.hpp(25,11)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U45 line 93 and U45 line 249
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 249 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::~vector(std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U45 line 93 and U45 line 249
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 249 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::parse(boost::basic_format<char, std::char_traits<char>, std::allocator<char>> *, const boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::string_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(430,9)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(479,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 480 and argN_ line 481
   remark #15346: vector dependence: assumed FLOW dependence between argN_ line 481 and this line 480
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(479,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: boost::io::detail::parse_printf_directive<char, std::char_traits<char>, std::allocator<char>, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_iterator, std::ctype<char>>(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_iterator &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_iterator &, boost::io::detail::format_item<char, std::char_traits<char>, std::allocator<char>> *, const std::ctype<char> &, std::size_t, unsigned char)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(76,26) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(156,45)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(60,19) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(231,48)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(76,26) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(233,66)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(60,19) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(244,52)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(76,26) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(246,74)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(254,9)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(187,9)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(189,13) ]
LOOP END
===========================================================================

Begin optimization report for: boost::io::detail::upper_bound_from_fstring<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::string_type, std::ctype<char>>(const boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::string_type &, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::value_type, const std::ctype<char> &, unsigned char)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(367,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(60,19) inlined into /home/dmarce1/packages/intel64/include/boost/format/parsing.hpp(382,66)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::make_or_reuse_data(boost::basic_format<char, std::char_traits<char>, std::allocator<char>> *, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(123,13)
   remark #15382: vectorization support: call to function _ZNSs6resizeEmc cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(763,15) ]
   remark #15382: vectorization support: call to function _ZNSs6resizeEmc cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(763,15) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 124 and  line 763
   remark #15346: vector dependence: assumed FLOW dependence between  line 763 and this line 124
LOOP END
===========================================================================

Begin optimization report for: std::vector<bool, std::allocator<bool>>::resize(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(542,4) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(953,44)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_offset line 160 and _M_offset line 158
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(334,4) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(953,44)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_p line 87 and _M_p line 89
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_p line 89 and _M_p line 87
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(334,4) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(953,44)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_p line 87 and _M_p line 89
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_p line 89 and _M_p line 87
LOOP END
===========================================================================

Begin optimization report for: std::fill(std::_Bit_iterator, std::_Bit_iterator, const bool &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(402,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(402,2)
   remark #15389: vectorization support: reference __first_255384 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(402,2)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_bvector.h(393,23) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(403,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_bvector.h(394,8) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(404,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_bvector.h(393,23) inlined into /usr/include/c++/4.9.0/bits/stl_bvector.h(407,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::resize(std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>> *, std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::size_type, const std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(698,4)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U38 line 93 and U38 line 245
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 245 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::_M_fill_insert(std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>> *, std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::iterator, std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::size_type, const std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(557,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(464,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(466,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(200,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(471,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(480,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(200,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(493,5)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(499,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(506,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(522,8)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U45 line 93 and U45 line 249
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 249 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>(std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U38 line 93 and U38 line 245
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 245 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::_M_fill_assign(std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>> *, std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::size_type, const std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(229,2)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U45 line 93 and U45 line 249
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 249 and this_383669 line 93
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(232,4)
   remark #15382: vectorization support: call to function _ZNSs6assignERKSs cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(555,22) ]
   remark #15382: vectorization support: call to function _ZNSs6assignERKSs cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(555,22) ]
   remark #15382: vectorization support: call to function _ZNSt6localeaSERKS_ cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(674,80) ]
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function _ZNSt6localeC1ERKS_ cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(465,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_387526 line 64 and this_387526 line 466
   remark #15346: vector dependence: assumed OUTPUT dependence between __first_387517 line 466 and __first_387517 line 64
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(200,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(233,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(748,7) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(239,25)
   remark #15382: vectorization support: call to function _ZNSs6assignERKSs cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(555,22) ]
   remark #15382: vectorization support: call to function _ZNSs6assignERKSs cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(555,22) ]
   remark #15382: vectorization support: call to function _ZNSt6localeaSERKS_ cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(674,80) ]
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function _ZNSt6localeC1ERKS_ cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(465,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between this_387526 line 64 and this_387526 line 466
   remark #15346: vector dependence: assumed OUTPUT dependence between __first_387620 line 466 and __first_387620 line 64
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(239,9)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U38 line 93 and U38 line 245
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 245 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::vector(std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>> *, std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::size_type, const std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::value_type &, const std::vector<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(200,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(292,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::unique_lock<hpx::lcos::local::spinlock>::lock(boost::unique_lock<hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/boost/thread/lock_types.hpp(346,10)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::io::detail::feed_impl<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>, std::allocator<char>, const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &>(boost::basic_format<char, std::char_traits<char>, std::allocator<char>> &, const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(137,41) inlined into /home/dmarce1/packages/intel64/include/boost/format/feed_args.hpp(294,31)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/format_implementation.hpp(145,30) inlined into /home/dmarce1/packages/intel64/include/boost/format/feed_args.hpp(294,31)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/feed_args.hpp(298,17)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: boost::io::detail::distribute<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>, std::allocator<char>, const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &>(boost::basic_format<char, std::char_traits<char>, std::allocator<char>> &, const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/feed_args.hpp(283,48)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::io::detail::put<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>, std::allocator<char>, const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &>(const boost::io::detail::put_holder<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::CharT, std::char_traits<char>> &, const boost::io::detail::format_item<char, std::char_traits<char>, std::allocator<char>> &, boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::string_type &, boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::internal_streambuf_t &, boost::io::detail::locale_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/format/feed_args.hpp(255,29)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::array<int, 3UL>>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::array<int, 3UL>> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(285,32) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15382: vectorization support: call to function _ZN3hpx4util24portable_binary_oarchive9save_implElc cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(126,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::_M_emplace_back_aux<const std::vector<std::string, std::allocator<std::string>>::value_type &>(std::vector<std::string, std::allocator<std::string>> *, const std::vector<std::string, std::allocator<std::string>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(418,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(433,2)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_301127 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<std::string, std::allocator<std::string>>::pointer, std::string>(std::_Vector_base<std::string, std::allocator<std::string>>::pointer, std::_Vector_base<std::string, std::allocator<std::string>>::pointer, std::allocator<std::string> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_301127 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: boost::algorithm::split<std::vector<std::string, std::allocator<std::string>>, const char *, boost::algorithm::detail::is_any_ofF<char>>(std::vector<std::string, std::allocator<std::string>> &, const char *&, boost::algorithm::detail::is_any_ofF<char> *, boost::algorithm::token_compress_mode_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/split.hpp(146,20)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __mem_4283 line 547 and __mem_4283 line 68
   remark #15346: vector dependence: assumed FLOW dependence between __first_301127 line 68 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::~vector(std::vector<std::string, std::allocator<std::string>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_301127 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<boost::range_detail::range_const_iterator<boost::remove_reference<char [2]>::type>::type>>(boost::algorithm::detail::is_any_ofF<char> *, const boost::iterator_range<boost::range_detail::range_const_iterator<boost::remove_reference<char [2]>::type>::type> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(393,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1943,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::__final_insertion_sort<boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter>(boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1844,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1884,4)
   remark #15382: vectorization support: call to function __builtin_memmove cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(578,6) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_550675 line 1846 and __last_550675 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.550609 line 1833 and __i.550609 line 1846

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1884,4)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1865,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1885,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_550675 line 1824 and __last_550675 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.550697 line 1833 and __i.550697 line 1824

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1885,4)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1844,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1889,2)
   remark #15382: vectorization support: call to function __builtin_memmove cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(578,6) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_550675 line 1846 and __last_550675 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.550609 line 1833 and __i.550609 line 1846

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1889,2)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::__heap_select<boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter>(boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(329,46) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1673,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1673,7)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1673,7)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1674,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __i line 1675 and __first line 135
   remark #15346: vector dependence: assumed FLOW dependence between __first line 135 and __i line 1675

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1676,4)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1676,4)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::__introsort_loop<boost::algorithm::detail::is_any_ofF<char>::set_value_type *, long, __gnu_cxx::__ops::_Iter_less_iter>(boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, long, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(393,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1943,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::__unguarded_partition_pivot<boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter>(boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/predefined_ops.h(42,26) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1922,14)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1901,4) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1922,14)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1904,4) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1922,14)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<boost::range_iterator<const char *, void>::type>(const boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>> *, boost::range_iterator<const char *, void>::type, boost::range_iterator<const char *, void>::type) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/finder.hpp(578,29)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/finder.hpp(578,54)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::__find_if<boost::range_iterator<const char *, void>::type, __gnu_cxx::__ops::_Iter_pred<boost::algorithm::detail::is_any_ofF<char>>>(boost::range_iterator<const char *, void>::type, boost::range_iterator<const char *, void>::type, __gnu_cxx::__ops::_Iter_pred<boost::algorithm::detail::is_any_ofF<char>> *, std::random_access_iterator_tag)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(118,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(120,14)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(124,14)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(128,14)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(132,14)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(140,14)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(144,14)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(148,14)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_type, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type, std::_Select1st<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type>, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_compare, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::_Pair_alloc_type>::_M_insert_unique<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, hpx::util::plugin::abstract_factory<hpx::components::component_factory_base> *>>(std::_Rb_tree<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_type, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type, std::_Select1st<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type>, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_compare, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::_Pair_alloc_type> *, std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, hpx::util::plugin::abstract_factory<hpx::components::component_factory_base> *> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_type, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type, std::_Select1st<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type>, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_compare, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::_Pair_alloc_type>::_M_insert_unique<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, hpx::util::plugin::abstract_factory<hpx::components::component_registry_base> *>>(std::_Rb_tree<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_type, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type, std::_Select1st<std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::value_type>, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::key_compare, std::map<std::string, boost::any, std::less<std::string>, std::allocator<std::pair<const std::string, boost::any>>>::_Pair_alloc_type> *, std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, hpx::util::plugin::abstract_factory<hpx::components::component_registry_base> *> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(boost::exception_ptr *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(131,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(boost::exception_ptr *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(131,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: __sti___ZN3hpx4lcos5local13spinlock_poolINS_6naming8gid_type3tagEE5pool_E()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
<Peeled>
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
   remark #15389: vectorization support: reference Ud3b has unaligned access   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(108,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(108,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.130 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::load_balancer::print(xtree::load_balancer *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/load_balancer.cpp(53,28)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::load_balancer::load_balancer(xtree::load_balancer *, xtree::load_balancer::component_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/load_balancer.cpp(27,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::~vector(std::vector<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::resize(std::vector<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>> *, std::vector<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<int32_t>::type, hpx::actions::extract_action<increment_server_action, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<int32_t>::type, hpx::actions::extract_action<increment_server_action, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::naming::gid_type::lock(hpx::naming::gid_type *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/naming/name.hpp(278,38)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/naming/name.hpp(278,38)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]

   LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/naming/name.hpp(278,38)
      remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::unique_lock<hpx::naming::gid_type>::~unique_lock(boost::unique_lock<hpx::naming::gid_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/boost/thread/lock_types.hpp(331,12)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::call_once<void (*)()>(hpx::lcos::local::once_flag &, void (*)())

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/event.hpp(79,17) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/once.hpp(82,25)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/once.hpp(50,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<int32_t>::type, hpx::actions::extract_action<increment_server_action, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<int32_t>::type, hpx::actions::extract_action<increment_server_action, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::load_balancer::decrement_server(xtree::load_balancer *, int, const xtree::location<3> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/load_balancer.cpp(153,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 154 and e line 154
   remark #15346: vector dependence: assumed ANTI dependence between e line 154 and _M_elems line 154
LOOP END

LOOP BEGIN at ../src/location.hpp(129,13) inlined into ../src/load_balancer.cpp(157,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 129 and _M_elems line 157
   remark #15346: vector dependence: assumed ANTI dependence between _M_elems line 157 and _M_elems line 129

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(157,19)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15389: vectorization support: reference loc has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(129,7) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 0.820 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(157,19)
   LOOP END

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(157,19)
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable.h(1468,7) inlined into ../src/load_balancer.cpp(159,25)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(160,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 161 and e line 161
   remark #15346: vector dependence: assumed ANTI dependence between e line 161 and _M_elems line 161
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/load_balancer.cpp(149,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::load_balancer::increment_server(xtree::load_balancer *, const xtree::location<3> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/load_balancer.cpp(68,28)
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 35 
   remark #15477: vector loop cost: 31.000 
   remark #15478: estimated potential speedup: 1.120 
   remark #15479: lightweight vector operations: 10 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(68,28)
<Remainder>
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(75,28)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(80,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(80,17)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(80,17)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(80,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(81,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/load_balancer.cpp(83,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/location.hpp(87,3) inlined into ../src/load_balancer.cpp(87,18)
         remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(88,27)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(88,27)
         <Peeled>
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(88,27)
            remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 2 
            remark #15477: vector loop cost: 0.750 
            remark #15478: estimated potential speedup: 1.450 
            remark #15479: lightweight vector operations: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(88,27)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/location.hpp(97,3) inlined into ../src/load_balancer.cpp(88,27)
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15389: vectorization support: reference this_loc has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(98,12) ]
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.540 
         remark #15479: lightweight vector operations: 3 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/location.hpp(87,3) inlined into ../src/load_balancer.cpp(94,18)
         remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(95,27)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(95,27)
         <Peeled>
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(95,27)
            remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 2 
            remark #15477: vector loop cost: 0.750 
            remark #15478: estimated potential speedup: 1.450 
            remark #15479: lightweight vector operations: 3 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/load_balancer.cpp(95,27)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/location.hpp(97,3) inlined into ../src/load_balancer.cpp(95,27)
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15389: vectorization support: reference this_loc has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(98,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(98,12) ]
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 4.500 
         remark #15478: estimated potential speedup: 0.540 
         remark #15479: lightweight vector operations: 3 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/load_balancer.cpp(84,19)
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
         remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(97,10) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(97,10) ]
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 5.000 
         remark #15478: estimated potential speedup: 0.600 
         remark #15479: lightweight vector operations: 5 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/indexer.hpp(96,3) inlined into ../src/load_balancer.cpp(85,8)
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(110,14)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15389: vectorization support: reference this_loc has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(129,7) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 0.820 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/load_balancer.cpp(111,3)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/load_balancer.cpp(112,9) ]
      remark #15389: vectorization support: reference this has unaligned access   [ ../src/load_balancer.cpp(112,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/load_balancer.cpp(112,9) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 6.500 
      remark #15478: estimated potential speedup: 0.820 
      remark #15479: lightweight vector operations: 11 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/location.hpp(145,3) inlined into ../src/load_balancer.cpp(102,26)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(146,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(146,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(146,9) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.440 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(53,28) inlined into ../src/load_balancer.cpp(126,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(130,3)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/load_balancer.cpp(131,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/load_balancer.cpp(131,13) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(134,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 135 and e line 135
   remark #15346: vector dependence: assumed ANTI dependence between e line 135 and _M_elems line 135
LOOP END

LOOP BEGIN at ../src/location.hpp(129,13) inlined into ../src/load_balancer.cpp(139,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 129 and _M_elems line 139
   remark #15346: vector dependence: assumed ANTI dependence between _M_elems line 139 and _M_elems line 129

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(139,19)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15389: vectorization support: reference this_loc has unaligned access   [ ../src/location.hpp(129,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(129,7) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 0.820 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(139,19)
   LOOP END

   LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/load_balancer.cpp(139,19)
   LOOP END
LOOP END

LOOP BEGIN at ../src/load_balancer.cpp(142,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 143 and e line 143
   remark #15346: vector dependence: assumed ANTI dependence between e line 143 and _M_elems line 143
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/load_balancer.cpp(145,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/load_balancer.cpp(60,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::unordered_set<xtree::location<3>, std::hash<xtree::location<3>>, std::equal_to<xtree::location<3>>, std::allocator<xtree::location<3>>>::find(std::unordered_set<xtree::location<3>, std::hash<xtree::location<3>>, std::equal_to<xtree::location<3>>, std::allocator<xtree::location<3>>> *, const std::unordered_set<xtree::location<3>, std::hash<xtree::location<3>>, std::equal_to<xtree::location<3>>, std::allocator<xtree::location<3>>>::key_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/location.hpp(24,3) inlined into /usr/include/c++/4.9.0/bits/unordered_set.h(547,26)
   remark #15389: vectorization support: reference __x has unaligned access   [ ../src/location.hpp(25,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(25,4) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.190 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable.h(1388,57) inlined into /usr/include/c++/4.9.0/bits/unordered_set.h(547,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::list<signed int, std::allocator<signed int>>::~list(std::list<signed int, std::allocator<signed int>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<increment_server_action>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<decrement_server_action>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::load_array_type<hpx::util::portable_binary_iarchive>::invoke<int [3]>(hpx::util::portable_binary_iarchive &, int (&)[3])

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_iarchive.hpp(302,44) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(591,12)
   remark #15382: vectorization support: call to function _ZN3hpx4util24portable_binary_iarchive9load_implERlc cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_iarchive.hpp(136,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between l.459356 line 135 and l.459356 line 136
   remark #15346: vector dependence: assumed OUTPUT dependence between l.459356 line 136 and l.459356 line 135
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<std::string, std::allocator<std::string>>::pointer>(std::_Vector_base<std::string, std::allocator<std::string>>::pointer, std::_Vector_base<std::string, std::allocator<std::string>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_301127 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer>(std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer, std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer>(std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15382: vectorization support: call to function _ZNSt6localeD1Ev cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/optional/optional.hpp(722,66) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between U38 line 93 and U38 line 245
   remark #15346: vector dependence: assumed ANTI dependence between this_383669 line 245 and this_383669 line 93
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer, xtree::load_balancer::entry_type>(std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer, std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer, std::allocator<xtree::load_balancer::entry_type> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer>(std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer, std::_Vector_base<xtree::load_balancer::entry_type, std::allocator<xtree::load_balancer::entry_type>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::runtime_support::create_component0<xtree::load_balancer>(hpx::naming::gid_type *, hpx::components::server::runtime_support *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/runtime_support.hpp(454,66)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::runtime_support::create_component0<xtree::tree<fmmx_node_type, 3>::silo_output_type>(hpx::naming::gid_type *, hpx::components::server::runtime_support *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/runtime_support.hpp(454,66)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::runtime_support::create_component0<fmmx_node_type>(hpx::naming::gid_type *, hpx::components::server::runtime_support *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/runtime_support.hpp(454,66)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(hpx::naming::id_type *, const struct lambda [] *, fmmx_node_type *)->void

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/tree.hpp(114,42)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_type, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type, std::_Identity<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type>, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_compare, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::_Key_alloc_type>::_M_insert_unique<const std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type &>(std::_Rb_tree<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_type, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type, std::_Identity<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type>, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_compare, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::_Key_alloc_type> *, const std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<hpx::components::server::create_component_action0<xtree::load_balancer>, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<hpx::components::server::create_component_action0<xtree::load_balancer>, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<hpx::components::server::create_component_action0<xtree::load_balancer>, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<hpx::components::server::create_component_action0<xtree::load_balancer>, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::silo_output<3>::send_zones_to_silo(xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(204,14)
   remark #15389: vectorization support: reference __first_478714 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(209,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/silo_output.hpp(217,30)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

      LOOP BEGIN at ../src/silo_output.hpp(87,4) inlined into ../src/silo_output.hpp(217,30)
         remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/silo_output.hpp(87,4) inlined into ../src/silo_output.hpp(217,30)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(210,12)
      remark #15389: vectorization support: reference __first_479612 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.750 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/silo_output.hpp(212,5)
      remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/silo_output.hpp(214,7) ]
      remark #15389: vectorization support: reference zones has unaligned access   [ ../src/silo_output.hpp(214,7) ]
      remark #15389: vectorization support: reference zones has unaligned access   [ ../src/silo_output.hpp(214,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/silo_output.hpp(214,7) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 18.000 
      remark #15478: estimated potential speedup: 0.750 
      remark #15479: lightweight vector operations: 15 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/silo_output.hpp(203,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::silo_output<3>::silo_zone::silo_zone(xtree::silo_output<3>::silo_zone *, xtree::silo_output<3>::silo_zone &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(65,14)
   remark #15389: vectorization support: reference __first_478714 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_type, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type, std::_Identity<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type>, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_compare, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::_Key_alloc_type>::_M_insert_unique<std::remove_reference<xtree::silo_output<3>::vertex &>::type>(std::_Rb_tree<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_type, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type, std::_Identity<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type>, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_compare, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::_Key_alloc_type> *, std::remove_reference<xtree::silo_output<3>::vertex &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at ../src/silo_output.hpp(87,4) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(87,4) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1498,42)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(87,4) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1501,11)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1501,11)
   remark #15389: vectorization support: reference __first_479612 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::__find_if<std::vector<bool, std::allocator<bool>>::iterator, __gnu_cxx::__ops::_Iter_negate<struct lambda []>>(std::vector<bool, std::allocator<bool>>::iterator, std::vector<bool, std::allocator<bool>>::iterator, __gnu_cxx::__ops::_Iter_negate<struct lambda []>, std::random_access_iterator_tag)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(118,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: xtree::silo_output<3>::do_output(xtree::silo_output<3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_iterator_base_funcs.h(80,7) inlined into ../src/silo_output.hpp(122,30)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(128,23)
   remark #15382: vectorization support: call to function _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(129,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(129,15)
<Remainder>
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(134,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(141,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at ../src/silo_output.hpp(142,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between coords line 143 and coords line 143
      remark #15346: vector dependence: assumed ANTI dependence between coords line 143 and coords line 143
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into ../src/silo_output.hpp(148,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_iterator_base_funcs.h(80,7) inlined into ../src/silo_output.hpp(150,39)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(150,48)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(150,48)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(150,48)
      remark #15389: vectorization support: reference __first_478714 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(150,48)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(152,38)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at ../src/silo_output.hpp(153,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_start line 154 and _M_start line 154
      remark #15346: vector dependence: assumed ANTI dependence between _M_start line 154 and _M_start line 154
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(169,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(169,28)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(169,28)
      remark #15388: vectorization support: reference __first_479612 has aligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/silo_output.hpp(169,28)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(172,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at ../src/silo_output.hpp(174,39)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/silo_output.hpp(184,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(189,3)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __mem_5722 line 547 and __mem_5722 line 68
   remark #15346: vector dependence: assumed FLOW dependence between U239f line 68 and U239f line 547
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(189,3)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(129,15)
   remark #15382: vectorization support: call to function _ZN37_INTERNAL_15____src_main_cpp_0eaabff79__gnu_cxx27__exchange_and_add_dispatchEPii cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(245,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _M_refcount line 547 and _M_refcount line 245
   remark #15346: vector dependence: assumed FLOW dependence between U239b line 245 and U239b line 547
LOOP END

LOOP BEGIN at ../src/silo_output.hpp(128,23)
   remark #15382: vectorization support: call to function _ZNSt6vectorIdSaIdEED1Ev cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
      remark #15388: vectorization support: reference __first_479612 has aligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
      remark #15388: vectorization support: reference __first_479612 has aligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_type, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type, std::_Identity<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type>, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_compare, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_type, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type, std::_Identity<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type>, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_compare, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::_Key_alloc_type> *, std::_Rb_tree<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_type, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type, std::_Identity<std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::value_type>, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::key_compare, std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(const struct lambda [] *, hpx::util::tuple<hpx::lcos::future<void>, hpx::lcos::shared_future<void>, void, void, void, void, void, void> *)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(393,65)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 32.500 
   remark #15478: estimated potential speedup: 3.180 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(393,22)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(396,5)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<void, hpx::util::unused_type>::requires_delete(hpx::lcos::detail::promise<void, hpx::util::unused_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(388,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(393,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(395,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>::operator=(std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> *, std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(453,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::resize(std::vector<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>> *, std::vector<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::descend<dfunc>(hpx::lcos::shared_future<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type> *, xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(599,44)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(600,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(617,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>::~vector(std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::~future_data(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(150,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type>(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(257,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(229,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *, std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(231,89)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(231,89)
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(231,89)
<Remainder>
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(231,89)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(232,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(232,38)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(232,38)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/./fmmx_node.hpp(233,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between __a_1079778 line 220 and __a_1079778 line 220
   remark #15346: vector dependence: assumed OUTPUT dependence between __a_1079778 line 220 and __a_1079778 line 220

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(219,7) inlined into ../src/./fmmx_node.hpp(233,2)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(237,23)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(321,7) inlined into ../src/./fmmx_node.hpp(238,37)
      remark #15389: vectorization support: reference __i_1093386 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(322,2) ]
      remark #15389: vectorization support: reference __a_1093386 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(322,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(322,2) ]
      remark #15315: loop was not vectorized: low trip count
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 6.000 
      remark #15478: estimated potential speedup: 0.650 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(321,7) inlined into ../src/./fmmx_node.hpp(238,37)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(240,3)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(19,26) inlined into ../src/./fmmx_node.hpp(242,33)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(19,26) inlined into ../src/./fmmx_node.hpp(242,33)
<Multiversioned v1>
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./cube_poles.hpp(20,12) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/./cube_poles.hpp(20,6) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./cube_poles.hpp(20,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./cube_poles.hpp(20,6) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 114 
   remark #15477: vector loop cost: 23.000 
   remark #15478: estimated potential speedup: 4.690 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(19,26) inlined into ../src/./fmmx_node.hpp(242,33)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(19,26) inlined into ../src/./fmmx_node.hpp(242,33)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(243,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this line 245 and this line 245
   remark #15346: vector dependence: assumed ANTI dependence between this line 245 and this line 245

   LOOP BEGIN at ../src/./fmmx_node.hpp(244,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between this line 245 and this line 245
      remark #15346: vector dependence: assumed ANTI dependence between this line 245 and this line 245
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./fmmx_node.hpp(235,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::future<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::get(hpx::traits::future_traits<hpx::lcos::future<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>, void>::result_type *, hpx::lcos::future<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/future.hpp(891,20)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/future.hpp(891,20)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/future.hpp(891,20)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/future.hpp(891,20)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: get_xtant_slice(std::gslice *, const std::valarray<std::size_t> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./valarray.hpp(39,35)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::async<struct lambda [], xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &>..0(boost::lazy_enable_if_c<true, hpx::detail::create_future<void (struct lambda [] *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &), hpx::util::deferred_call_result_of<void (struct lambda [] *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)>>>::type *, hpx::launch::enum_type, struct lambda [] &&, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(115,53)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15382: vectorization support: call to function _ZNSt8valarrayIdED1Ev cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type *, const struct lambda [] *, hpx::util::tuple<hpx::lcos::future<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>, hpx::lcos::shared_future<void>, void, void, void, void, void, void> *)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(611,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(614,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(614,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::resize(std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> *, std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<struct lambda [] (), void>::type, struct lambda [] &>(boost::disable_if_c<false, boost::detail::cpp0x_result_of_impl<struct lambda [] (hpx::util::detail::qualify_as_impl<boost::mpl::identity<hpx::util::detail::unwrap_impl<hpx::lcos::future<hpx::util::tuple<hpx::lcos::future<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>, hpx::lcos::shared_future<void>, void, void, void, void, void, void>>, void>::type>::type, hpx::util::detail::unwrap_impl<hpx::util::tuple<hpx::util::decay<hpx::lcos::future<hpx::util::tuple<hpx::lcos::future<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>, hpx::lcos::shared_future<void>, void, void, void, void, void, void>>>::type, void, void, void, void, void, void, void>, void>::type>::type *), void>::type>::type *, struct lambda [] &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/invoke.hpp(165,57)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend(std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(168,95)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(168,95)
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(168,95)
<Remainder>
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(168,95)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(169,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(169,38)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(169,38)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(173,44)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(174,6)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(177,12)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _M_data line 734 and _M_data line 742
   remark #15346: vector dependence: assumed FLOW dependence between this_455013 line 742 and this_455013 line 734
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(177,12)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(179,49)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(180,7)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(185,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 187 and _M_data line 189
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 189 and F64 line 187
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(192,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at ../src/./fmmx_node.hpp(193,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_ptr line 194 and _M_ptr line 194
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 194 and _M_data line 194
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(193,4)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(197,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_ptr line 198 and _M_ptr line 198
      remark #15346: vector dependence: assumed ANTI dependence between _M_ptr line 198 and _M_ptr line 198
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(197,4)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(202,22)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./fmmx_node.hpp(203,39)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 675 and _M_data line 675
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 675 and _M_data line 675
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./fmmx_node.hpp(203,39)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(210,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./fmmx_node.hpp(183,2)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/./fmmx_node.hpp(201,43)
      remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: get_restrict_slice(std::gslice *, const std::valarray<std::size_t> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(55,49)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between I64 line 219 and I64 line 219
   remark #15346: vector dependence: assumed ANTI dependence between __p.455240 line 219 and __p.455240 line 219
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(55,49)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(57,35)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(61,35)
   remark #15389: vectorization support: reference I64 has unaligned access   [ ../src/./valarray.hpp(62,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(62,3) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.460 
   remark #15479: lightweight vector operations: 9 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(61,35)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./valarray.hpp(64,10)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./valarray.hpp(64,10)
   remark #15389: vectorization support: reference __p.437890 has unaligned access
   remark #15389: vectorization support: reference __p.437890 has unaligned access
   remark #15389: vectorization support: reference __p.437890 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.180 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./valarray.hpp(64,10)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(65,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(65,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::async<struct lambda [], xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>..0(boost::lazy_enable_if_c<true, hpx::detail::create_future<void (struct lambda [] *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &), hpx::util::deferred_call_result_of<void (struct lambda [] *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &)>>>::type *, hpx::launch::enum_type, struct lambda [] &&, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(115,53)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15382: vectorization support: call to function _ZNSt8valarrayIdED1Ev cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::make_shared<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type>(std::shared_ptr<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /usr/include/c++/4.9.0/bits/shared_ptr.h(603,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /usr/include/c++/4.9.0/bits/shared_ptr.h(603,14)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(const struct lambda [] *, hpx::util::tuple<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, hpx::lcos::shared_future<void>, void, void, void, void, void, void> *)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(572,18)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(577,6)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(571,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(573,6)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_unknown_exception(boost::exception_ptr *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(281,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_unknown_boost_exception(boost::exception_ptr *, const boost::exception &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(288,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception::~exception(boost::exception *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(282,5)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_unknown_std_exception(boost::exception_ptr *, const std::exception &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(298,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::bad_exception>(boost::exception_ptr *, const std::bad_exception &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::copy_boost_exception(boost::exception *, const boost::exception *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(105,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,24)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(119,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,24)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,24)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,24)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(422,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(426,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(426,22)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::bad_typeid>(boost::exception_ptr *, const std::bad_typeid &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::bad_cast>(boost::exception_ptr *, const std::bad_cast &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::bad_alloc>(boost::exception_ptr *, const std::bad_alloc &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::out_of_range>(boost::exception_ptr *, const std::out_of_range &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::~vector(std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::_M_move_assign(std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> *, std::vector<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>> &&, std::true_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(1453,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::ascend<afunc>(xtree::node<fmmx_node_type, 3> *, hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(581,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::resize(std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>> *, std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_construct.h(93,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::exchange_set<es_func>(xtree::node<fmmx_node_type, 3> *, const xtree::dir_type<3> &, xtree::node<fmmx_node_type, 3>::exchange_set_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::exchange_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::exchange_set, 0L}>::type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/counting_semaphore.hpp(117,17) inlined into ../src/node.hpp(636,21)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(639,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/node.hpp(637,46)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::async<struct lambda [], xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &>..0(boost::lazy_enable_if_c<true, hpx::detail::create_future<struct lambda [] (xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &), hpx::util::deferred_call_result_of<struct lambda [] (xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)>>>::type *, hpx::launch::enum_type, struct lambda [] &&, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 9 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(115,53)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/preprocessed/async_5.hpp(116,13)
   remark #15382: vectorization support: call to function _ZNSt8valarrayIdED1Ev cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<struct lambda [] (), void>::type, struct lambda [] &>(boost::disable_if_c<false, hpx::lcos::future<void>>::type *, struct lambda [] &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(83,14) inlined into /home/dmarce1/packages/intel64/include/hpx/util/invoke.hpp(165,57)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(79,10) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(79,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(79,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.830 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into /home/dmarce1/packages/intel64/include/hpx/util/invoke.hpp(165,57)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<void, hpx::util::unused_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<void, hpx::util::unused_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(const struct lambda [] *)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(676,23)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(677,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/node.hpp(677,50)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/counting_semaphore.hpp(130,17) inlined into ../src/node.hpp(678,24)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(680,23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(676,46)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(676,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::runtime_support::create_component0<xtree::tree_type>(hpx::naming::gid_type *, hpx::components::server::runtime_support *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/runtime_support.hpp(454,66)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::~node(xtree::node<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(265,1)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::~vector(std::vector<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::tree<fmmx_node_type, 3>::delete_node(xtree::tree<fmmx_node_type, 3> *, fmmx_node_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into ../src/tree.hpp(131,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/tree.hpp(130,52)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::~vector(std::vector<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::~vector(std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::~fmmx_node(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(321,1)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(321,1)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(321,1)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::~fmmx_node(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(142,10)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(142,10)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(142,10)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::access::destroy<xtree::node<fmmx_node_type, 3>::wrapped_type>(const xtree::node<fmmx_node_type, 3>::wrapped_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/access.hpp(125,32)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/access.hpp(125,32)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/access.hpp(125,32)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::pointer_iserializer<hpx::util::portable_binary_iarchive, xtree::node<fmmx_node_type, 3>::wrapped_type>::load_object_ptr(const boost::archive::detail::pointer_iserializer<hpx::util::portable_binary_iarchive, xtree::node<fmmx_node_type, 3>::wrapped_type> *, boost::archive::detail::basic_iarchive &, void *, unsigned int) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(341,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(341,9)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(341,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(341,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::array<std::valarray<double>, 25UL>::~array(std::array<std::valarray<double>, 25UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::node(xtree::node<fmmx_node_type, 3> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/node.hpp(213,29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/node.hpp(213,29)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/node.hpp(213,29)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/node.hpp(213,29)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::allocate(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(293,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(293,38)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(293,38)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(295,34)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(296,6)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(298,34)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(299,6)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(301,6)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(302,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(303,8)
      remark #15389: vectorization support: reference __b_455049 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.750 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::pointer_iserializer<hpx::util::portable_binary_iarchive, xtree::tree<fmmx_node_type, 3>>::load_object_ptr(const boost::archive::detail::pointer_iserializer<hpx::util::portable_binary_iarchive, xtree::tree<fmmx_node_type, 3>> *, boost::archive::detail::basic_iarchive &, void *, unsigned int) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(341,9)
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 1.110 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::~set(std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /usr/include/c++/4.9.0/bits/stl_set.h(90,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_type, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type, std::_Identity<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type>, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_compare, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::_Key_alloc_type>::_M_erase(std::_Rb_tree<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_type, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type, std::_Identity<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type>, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_compare, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::_Key_alloc_type> *, std::_Rb_tree<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_type, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type, std::_Identity<std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::value_type>, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::key_compare, std::set<fmmx_node_type *, std::less<fmmx_node_type *>, std::allocator<fmmx_node_type *>>::_Key_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<action_send_zones_to_silo>::~transfer_action(hpx::actions::transfer_action<action_send_zones_to_silo> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(484,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>::~tuple(hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/tuple_5.hpp(1948,11)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<action_send_zones_to_silo>::~transfer_action(hpx::actions::transfer_action<action_send_zones_to_silo> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(481,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<std::remove_reference<hpx::actions::transfer_action<action_send_zones_to_silo>::arguments_type &>::type>(hpx::threads::thread_function_type *, hpx::naming::address::address_type, std::remove_reference<hpx::actions::transfer_action<action_send_zones_to_silo>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(667,20)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(667,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<std::remove_reference<hpx::actions::transfer_action<action_send_zones_to_silo>::arguments_type &>::type>(hpx::threads::thread_function_type *, hpx::actions::continuation_type &, hpx::naming::address::address_type, std::remove_reference<hpx::actions::transfer_action<action_send_zones_to_silo>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(681,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::unique_function<hpx::threads::thread_function_sig, void, void>::unique_function<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>(hpx::util::unique_function<hpx::threads::thread_function_sig, void, void> *, boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type &&, boost::disable_if_c<false, void>::type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/unique_function_template.hpp(271,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>::deref<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>>::element>::destroy(const boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>::deref<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>>::element> *, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/extended_type_info_typeid.hpp(133,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::stl::load_collection<hpx::util::portable_binary_iarchive, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, boost::serialization::stl::archive_input_seq<hpx::util::portable_binary_iarchive, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>, boost::serialization::stl::reserve_imp<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>>(hpx::util::portable_binary_iarchive &, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(140,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(153,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(153,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(157,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::_M_emplace_back_aux<const std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::value_type &>(std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> *, const std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(418,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(433,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer, xtree::silo_output<3>::zone>(std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer, std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer, std::allocator<xtree::silo_output<3>::zone> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>::deref<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>>::element>::destroy(const boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>::deref<boost::fusion::hpx_tuple_iterator<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, 0>::advance<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>>>::type, boost::mpl::int_<1>>::tuple_type, 1>>::element> *, void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(119,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::stl::save_collection<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>(boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type &, const std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> &, boost::serialization::collection_size_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/collections_save_imp.hpp(59,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::array<double, 3UL>>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::array<double, 3UL>> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(285,44) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/basic_binary_oprimitive.hpp(75,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between ar line 203 and this_285002 line 74
   remark #15346: vector dependence: assumed FLOW dependence between this_285002 line 74 and ar line 203
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::~transfer_action(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(484,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>::~tuple(hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/tuple_5.hpp(1948,11)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::~transfer_action(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(481,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::arguments_type &>::type>(hpx::threads::thread_function_type *, hpx::naming::address::address_type, std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(279,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(279,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_continuation_thread_object_function_void<xtree::node<fmmx_node_type, 3>, std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::arguments_type &>::type, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>(hpx::threads::thread_function_type *, hpx::actions::continuation_type *, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/construct_continuation_functions_5.hpp(223,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::unique_function<hpx::threads::thread_function_sig, void, void>::unique_function<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>>>::type>(hpx::util::unique_function<hpx::threads::thread_function_sig, void, void> *, boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>>>::type &&, boost::disable_if_c<false, void>::type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/unique_function_template.hpp(271,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>>::dispose(boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_impl.hpp(78,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>>::element>::destroy(const boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>>::element> *, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/extended_type_info_typeid.hpp(133,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::stl::load_collection<hpx::util::portable_binary_iarchive, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, boost::serialization::stl::archive_input_seq<hpx::util::portable_binary_iarchive, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>, boost::serialization::stl::reserve_imp<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>(hpx::util::portable_binary_iarchive &, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(140,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(153,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(153,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/collections_load_imp.hpp(157,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::_M_emplace_back_aux<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::value_type &>(std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *, const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(418,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(433,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer, hpx::naming::id_type>(std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer, std::_Vector_base<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::pointer, std::allocator<hpx::naming::id_type> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>>::element>::destroy(const boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, 0>>::element> *, void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(119,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::stl::save_collection<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>(boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type &, const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &, boost::serialization::collection_size_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/collections_save_imp.hpp(59,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::~transfer_action(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(484,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>::~tuple(hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/tuple_5.hpp(1948,11)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::~transfer_action(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(481,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::arguments_type &>::type>(hpx::threads::thread_function_type *, hpx::naming::address::address_type, std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(667,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(667,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::arguments_type &>::type>(hpx::threads::thread_function_type *, hpx::actions::continuation_type &, hpx::naming::address::address_type, std::remove_reference<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>::arguments_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(681,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::unique_function<hpx::threads::thread_function_sig, void, void>::unique_function<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>>::type>(hpx::util::unique_function<hpx::threads::thread_function_sig, void, void> *, boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>>::type &&, boost::disable_if_c<false, void>::type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/unique_function_template.hpp(271,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>>::dispose(boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_impl.hpp(78,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, 0>>::element>::load_object_data(const boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, 0>>::element> *, boost::archive::detail::basic_iarchive &, void *, unsigned int) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(39,3) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(184,5)
   remark #15382: vectorization support: call to function _ZN3hpx4util24portable_binary_iarchive9load_implERlc cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_iarchive.hpp(136,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 173 and t_459356 line 137
   remark #15346: vector dependence: assumed FLOW dependence between t_459356 line 137 and x line 173
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<xtree::indexer<3, 3, -1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>::type>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<xtree::indexer<3, 3, -1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>::type> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(39,3) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15382: vectorization support: call to function _ZN5boost7archive6detail14basic_oarchive12end_preambleEv cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(87,12) ]
   remark #15382: vectorization support: call to function _ZN3hpx4util24portable_binary_oarchive9save_implElc cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(126,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>>::~future_data(hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(150,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::~future_data(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(150,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Sp_counted_ptr_inplace<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type, std::allocator<std::remove_const<std::remove_volatile<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type>::type>::type>, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr_inplace<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type, std::allocator<std::remove_const<std::remove_volatile<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type>::type>::type>, __gnu_cxx::_S_atomic> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /usr/include/c++/4.9.0/bits/shared_ptr_base.h(524,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::~future_data(hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(150,12)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<hpx::util::decay<struct lambda []>::type (), void>::type, struct lambda []>::do_run(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<hpx::util::decay<struct lambda []>::type (), void>::type, struct lambda []> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(102,23)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(96,3) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(102,23)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(97,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(97,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::exchange_set(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *, xtree::dir_type<3>, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::exchange_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(331,95)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(331,95)
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(331,95)
<Remainder>
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(331,95)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(333,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 334 and _M_data line 334
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 334 and this line 334
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(336,72)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(340,54)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(340,90)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into ../src/./fmmx_node.hpp(338,37)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/./fmmx_node.hpp(343,11)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(197,2) inlined into ../src/./fmmx_node.hpp(352,42)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(354,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 356 and _M_data line 356
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 356 and F64 line 356

   LOOP BEGIN at ../src/./fmmx_node.hpp(355,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 356 and _M_data line 356
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 356 and F64 line 356
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(355,4)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(359,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 360 and Mb_ptr line 360
   remark #15346: vector dependence: assumed ANTI dependence between Mb_ptr line 360 and _M_data line 360
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(359,3)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(365,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 675 and _M_data line 675
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 675 and _M_data line 675

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./fmmx_node.hpp(365,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 675 and _M_data line 675
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 675 and _M_data line 675
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./fmmx_node.hpp(365,21)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(367,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(367,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(367,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/./fmmx_node.hpp(368,11)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(369,3)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(368,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(368,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./fmmx_node.hpp(348,39)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/./fmmx_node.hpp(363,43)
      remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<real>>::valarray(std::valarray<std::valarray<real>> *, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 30 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3340 
   remark #15477: vector loop cost: 712.750 
   remark #15478: estimated potential speedup: 4.670 
   remark #15479: lightweight vector operations: 861 
   remark #15482: vectorized math library calls: 13 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<real>>::~valarray(std::valarray<std::valarray<real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_30476 line 29
   remark #15346: vector dependence: assumed ANTI dependence between __b_30476 line 29 and  line 29
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<double>>::valarray<std::_BinClos<std::__plus, std::_Expr, std::_Constant, std::_BinClos<std::__multiplies, std::_ValArray, std::_Constant, std::valarray<double>, std::valarray<double>>, std::valarray<double>>>(std::valarray<std::valarray<double>> *, const std::_Expr<std::_BinClos<std::__plus, std::_Expr, std::_Constant, std::_BinClos<std::__multiplies, std::_ValArray, std::_Constant, std::valarray<double>, std::valarray<double>>, std::valarray<double>>, std::valarray<double>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/valarray(696,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/valarray(696,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F64 line 219 and F64 line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1100114 line 219 and __p.1100114 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/valarray(696,7)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/valarray(696,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 219 and _M_data line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1080262 line 219 and __p.1080262 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/valarray(696,7)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<action_send_zones_to_silo>>::dispose(boost::detail::sp_counted_impl_p<hpx::actions::transfer_action<action_send_zones_to_silo>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_impl.hpp(78,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(100,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::did_alloc(const hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(300,61)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~one_size_heap_list(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(78,9)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::~wrapper_heap_list(hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(19,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: future_wrapper<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::load<hpx::util::portable_binary_iarchive>(future_wrapper<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, hpx::util::portable_binary_iarchive &, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/util.hpp(178,5)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/util.hpp(178,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/util.hpp(180,8)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::extended_type_info_typeid<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::destroy(const boost::serialization::extended_type_info_typeid<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/extended_type_info_typeid.hpp(133,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::destroy(const boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(119,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::load<hpx::util::portable_binary_iarchive, double>(hpx::util::portable_binary_iarchive &, std::valarray<double> &, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
      remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<future_wrapper<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>, hpx::util::tuple<hpx::util::decay<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type &&>::type, void, void, void, void, void, void, void>>::type>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<future_wrapper<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>, hpx::util::tuple<hpx::util::decay<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type &&>::type, void, void, void, void, void, void, void>>::type> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, boost::remove_extent<std::valarray<double> [25]>::type>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, boost::remove_extent<std::valarray<double> [25]>::type> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(285,44) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/basic_binary_oprimitive.hpp(75,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between ar line 203 and this_285002 line 74
   remark #15346: vector dependence: assumed FLOW dependence between this_285002 line 74 and ar line 203
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>>::~when_all_frame(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(196,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Sp_counted_ptr_inplace<std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>, std::allocator<std::remove_const<std::remove_volatile<std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>>::type>::type>, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr_inplace<std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>, std::allocator<std::remove_const<std::remove_volatile<std::vector<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>>::type>::type>, __gnu_cxx::_S_atomic> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/shared_ptr_base.h(524,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::descend_operation<dfunc>::operator()(const xtree::node<fmmx_node_type, 3>::descend_operation<dfunc> *, xtree::node<fmmx_node_type, 3> &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(455,7)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(600,3) inlined into ../src/node.hpp(455,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(455,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::exchange_get<eg_func, es_func>(xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(649,3)
   remark #15382: vectorization support: call to function _ZN3hpx5applyINS_7actions11make_actionIMN5xtree4nodeINS3_4fmmx9fmmx_nodeILm3ELm8ELm5EEELi3EEEFviEXadL_ZNS8_12exchange_getINS8_21exchange_get_functionI14future_wrapperISt5arrayISt8valarrayIdELm25EEEXadL_ZNS7_12exchange_getENS3_7indexerILi3ELi3ELin1EEEEEEENS8_21exchange_set_functionISI_XadL_ZNS7_12exchange_setESK_RSI_EEEEEEviEENS1_6detail9this_typeEN5boost3mpl5bool_ILb0EEEEERiEEbRKNS_6naming7id_typeEOT0_ cannot be vectorized   [ ../src/node.hpp(650,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(653,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(655,48)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(655,48)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 3.960 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(655,48)
<Remainder>
LOOP END

LOOP BEGIN at ../src/node.hpp(656,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(660,25)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(661,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/node.hpp(661,49)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(668,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(671,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(660,48)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(687,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(660,35)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::~vector(std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::when_all<hpx::lcos::shared_future<void>>(hpx::lcos::future<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>> *, std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(367,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(373,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(367,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(371,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::emplace_back<std::remove_reference<hpx::lcos::shared_future<void> &>::type>(std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>> *, std::remove_reference<hpx::lcos::shared_future<void> &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer, hpx::lcos::shared_future<void>>(std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer, std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer, std::allocator<hpx::lcos::shared_future<void>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void>::type>(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void>::type, boost::range_iterator<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void>::type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(257,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(229,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::ascend_operation<afunc>::operator()(const xtree::node<fmmx_node_type, 3>::ascend_operation<afunc> *, xtree::node<fmmx_node_type, 3> &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(581,3) inlined into ../src/node.hpp(448,7)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_factory_hpx_silo_output_type::hpx_plugin_exporter_factory_hpx_silo_output_type(<unnamed>::hpx_plugin_exporter_factory_hpx_silo_output_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_registry_hpx_silo_output_type::hpx_plugin_exporter_registry_hpx_silo_output_type(<unnamed>::hpx_plugin_exporter_registry_hpx_silo_output_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_factory_hpx_tree_type::hpx_plugin_exporter_factory_hpx_tree_type(<unnamed>::hpx_plugin_exporter_factory_hpx_tree_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_registry_hpx_tree_type::hpx_plugin_exporter_registry_hpx_tree_type(<unnamed>::hpx_plugin_exporter_registry_hpx_tree_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_factory_hpx_fmmx_node_type::hpx_plugin_exporter_factory_hpx_fmmx_node_type(<unnamed>::hpx_plugin_exporter_factory_hpx_fmmx_node_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_registry_hpx_fmmx_node_type::hpx_plugin_exporter_registry_hpx_fmmx_node_type(<unnamed>::hpx_plugin_exporter_registry_hpx_fmmx_node_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/main.cpp(20,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: __sti___ZN3hpx4lcos5local13spinlock_poolINS_6naming8gid_type3tagEE5pool_E()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
<Peeled>
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
   remark #15389: vectorization support: reference U3968 has unaligned access   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(108,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(108,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 1.130 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock_pool.hpp(88,47)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node_static_data<3UL, 8UL, 5UL>::fmmx_node_static_data(xtree::fmmx::fmmx_node_static_data<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(38,18)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(42,39)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(42,39)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(42,39)
<Remainder>
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/./fmmx_node.hpp(44,23)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(45,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(47,4)
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(49,12) ]
   remark #15389: vectorization support: reference I64 has unaligned access   [ ../src/./fmmx_node.hpp(50,10) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(53,13) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(55,13) ]
   remark #15389: vectorization support: reference I64 has unaligned access   [ ../src/./fmmx_node.hpp(57,10) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(49,12) ]
   remark #15389: vectorization support: reference I64 has unaligned access   [ ../src/./fmmx_node.hpp(50,10) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(53,13) ]
   remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/./fmmx_node.hpp(55,13) ]
   remark #15389: vectorization support: reference I64 has unaligned access   [ ../src/./fmmx_node.hpp(57,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./fmmx_node.hpp(57,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.590 
   remark #15479: lightweight vector operations: 41 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(60,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(60,24)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(61,45)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(61,76)
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(61,109)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(64,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(65,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(66,49)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(69,51)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(75,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(75,26)
      remark #15389: vectorization support: reference SI32 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15389: vectorization support: reference SI32 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 5.000 
      remark #15479: lightweight vector operations: 8 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(75,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(76,47)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(76,47)
      remark #15389: vectorization support: reference U2480 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15389: vectorization support: reference U2482 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 56 
      remark #15477: vector loop cost: 53.500 
      remark #15478: estimated potential speedup: 1.040 
      remark #15479: lightweight vector operations: 10 
      remark #15481: heavy-overhead vector operations: 2 
      remark #15482: vectorized math library calls: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(76,47)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(78,28)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(78,28)
      remark #15389: vectorization support: reference SI32 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15389: vectorization support: reference SI32 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 5.000 
      remark #15479: lightweight vector operations: 8 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(78,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(73,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 72 and _M_data line 73
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 73 and _M_data line 72

      LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(72,34)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
         remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
         remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
      LOOP END

      LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(72,34)
      LOOP END

      LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(72,34)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(85,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(86,84)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(88,24)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(89,97)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/./fmmx_node.hpp(92,4)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/./fmmx_node.hpp(92,4)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/./fmmx_node.hpp(66,49)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/./fmmx_node.hpp(44,46)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(96,50)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(98,51)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(98,51)
      remark #15389: vectorization support: reference F64 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15388: vectorization support: reference dif has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 4.060 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(98,51)
   <Remainder>
      remark #15389: vectorization support: reference F64 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15388: vectorization support: reference dif has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(392,4) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(389,7) inlined into ../src/./fmmx_node.hpp(98,51)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/./fmmx_node.hpp(105,3)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(105,3)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./fmmx_node.hpp(44,33)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/./fmmx_node.hpp(66,54)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(94,49)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::size_t>>::resize(std::valarray<std::valarray<std::size_t>> *, std::size_t, std::valarray<std::size_t> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079567 line 29
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079567 line 29 and  line 29
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: product<std::size_t>(std::valarray<std::size_t> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./valarray.hpp(83,35)
<Peeled>
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(83,35)
   remark #15389: vectorization support: reference p has unaligned access   [ ../src/./valarray.hpp(84,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(84,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 1.110 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(83,35)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<double>>::resize(std::valarray<std::valarray<double>> *, std::size_t, std::valarray<double> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_30476 line 29
   remark #15346: vector dependence: assumed ANTI dependence between __b_30476 line 29 and  line 29
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::transform<std::valarray<double> *, std::valarray<double> *, struct lambda []>(std::valarray<double> *, std::valarray<double> *, std::valarray<double> *, struct lambda [])

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,7)
   remark #15382: vectorization support: call to function scalable_malloc cannot be vectorized   [ /opt/intel/composer_xe_2015.0.090/tbb/include/tbb/scalable_allocator.h(246,38) ]
   remark #15382: vectorization support: call to function _ZN3tbb8internal12NFS_AllocateEmmPv cannot be vectorized   [ /opt/intel/composer_xe_2015.0.090/tbb/include/tbb/cache_aligned_allocator.h(83,24) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first line 695 and __result line 739
   remark #15346: vector dependence: assumed FLOW dependence between __result line 739 and __first line 695

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(4163,24)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between corner line 219 and corner line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1080262 line 219 and __p.1080262 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(4163,24)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<double>>::operator=(std::valarray<std::valarray<double>> *, std::valarray<std::valarray<double>> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(736,4)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_30476 line 29
   remark #15346: vector dependence: assumed ANTI dependence between __b_30476 line 29 and  line 29
LOOP END
===========================================================================

Begin optimization report for: create_position_array(std::valarray<std::valarray<double>> *, std::valarray<std::size_t> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(93,11)
<Peeled>
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(93,11)
   remark #15389: vectorization support: reference U38c2 has unaligned access   [ ../src/./valarray.hpp(84,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(84,3) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 1.110 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(93,11)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/./valarray.hpp(94,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 20 
   remark #15477: vector loop cost: 75.000 
   remark #15478: estimated potential speedup: 0.530 
   remark #15479: lightweight vector operations: 11 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/./valarray.hpp(94,49)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(95,35)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(96,11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(96,11)
      <Peeled>
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(96,11)
         remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 3 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.280 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(96,11)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(99,45)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(99,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(99,30)
      remark #15389: vectorization support: reference U38c4 has unaligned access   [ ../src/./valarray.hpp(84,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(84,3) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 1.110 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(99,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(100,8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(100,8)
      <Peeled>
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(100,8)
         remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 3 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.280 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./valarray.hpp(100,8)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(103,37)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(109,35)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(111,23)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(111,23)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(112,28)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(112,28)
      remark #15389: vectorization support: reference U38c8 has unaligned access   [ ../src/./valarray.hpp(84,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(84,3) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 1.110 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(112,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(113,41)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F64 line 219 and F64 line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.455529 line 219 and __p.455529 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(113,41)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(115,6)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(115,6)
      remark #15389: vectorization support: reference U38c8 has unaligned access   [ ../src/./valarray.hpp(84,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./valarray.hpp(84,3) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 1.110 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/./valarray.hpp(83,35) inlined into ../src/./valarray.hpp(115,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Peeled, Multiversioned v1>
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Multiversioned v1>
         remark #15388: vectorization support: reference __p.455492 has aligned access
         remark #15388: vectorization support: reference __p.455492 has aligned access
         remark #15389: vectorization support: reference __q.455493 has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 5 
         remark #15477: vector loop cost: 11.000 
         remark #15478: estimated potential speedup: 1.730 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Remainder, Multiversioned v1>
         remark #15388: vectorization support: reference __p.455492 has aligned access
         remark #15388: vectorization support: reference __p.455492 has aligned access
         remark #15389: vectorization support: reference __q.455493 has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Remainder, Multiversioned v1>
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./valarray.hpp(114,13)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./valarray.hpp(114,13)
      remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./valarray.hpp(118,2)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./valarray.hpp(106,37)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::copy<std::list<std::size_t, std::allocator<std::_Bit_type>>::iterator, std::size_t *>(std::list<std::size_t, std::allocator<std::_Bit_type>>::iterator, std::list<std::size_t, std::allocator<std::_Bit_type>>::iterator, std::size_t *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(305,19) inlined into /usr/include/c++/4.9.0/bits/stl_algobase.h(464,15)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::size_t>::resize(std::valarray<std::size_t> *, std::size_t, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::list<std::size_t, std::allocator<std::_Bit_type>>::size(const std::list<std::size_t, std::allocator<std::_Bit_type>> *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_iterator_base_funcs.h(80,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(887,16)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::valarray<std::size_t>>>::~valarray(std::valarray<std::valarray<std::valarray<std::size_t>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079557 line 702 and  line 29
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079557 line 702

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
      remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079567 line 29
      remark #15346: vector dependence: assumed ANTI dependence between __b_1079567 line 29 and  line 29
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::list<std::size_t, std::allocator<std::_Bit_type>>::~list(std::list<std::size_t, std::allocator<std::_Bit_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::size_t>>::~valarray(std::valarray<std::valarray<std::size_t>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079567 line 29
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079567 line 29 and  line 29
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::valarray<std::size_t>>>::resize(std::valarray<std::valarray<std::valarray<std::size_t>>> *, std::size_t, std::valarray<std::valarray<std::size_t>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079557 line 702 and  line 29
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079557 line 702

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
      remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079567 line 29
      remark #15346: vector dependence: assumed ANTI dependence between __b_1079567 line 29 and  line 29
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,62)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: cube_poles<5L>::cube_poles(cube_poles<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(28,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(29,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(29,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(29,5)
      remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(29,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(219,7) inlined into ../src/./cube_poles.hpp(32,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(34,3)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/./cube_poles.hpp(38,6) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/./cube_poles.hpp(40,6) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/./cube_poles.hpp(38,6) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/./cube_poles.hpp(40,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/./cube_poles.hpp(40,6) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 122.000 
   remark #15478: estimated potential speedup: 0.360 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(45,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./cube_poles.hpp(52,13)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./cube_poles.hpp(52,13)
      remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 7.000 
      remark #15478: estimated potential speedup: 4.510 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./cube_poles.hpp(52,13)
   <Remainder>
      remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./cube_poles.hpp(52,13)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference __p.1079849 has aligned access
      remark #15388: vectorization support: reference __p.1079849 has aligned access
      remark #15389: vectorization support: reference _M_data has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference __p.1079849 has aligned access
      remark #15388: vectorization support: reference __p.1079849 has aligned access
      remark #15389: vectorization support: reference _M_data has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(675,4) inlined into ../src/./cube_poles.hpp(55,9)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/./cube_poles.hpp(54,14)

      LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/./cube_poles.hpp(54,14)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/./cube_poles.hpp(54,14)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/./cube_poles.hpp(54,14)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/./cube_poles.hpp(54,14)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./cube_poles.hpp(60,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./cube_poles.hpp(60,5)
   remark #15388: vectorization support: reference __p.1079890 has aligned access
   remark #15388: vectorization support: reference __p.1079890 has aligned access
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 3.480 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./cube_poles.hpp(60,5)
<Remainder>
   remark #15388: vectorization support: reference __p.1079890 has aligned access
   remark #15388: vectorization support: reference __p.1079890 has aligned access
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(677,4) inlined into ../src/./cube_poles.hpp(60,5)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(63,6)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(63,6)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(63,6)
      remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./cube_poles.hpp(63,6)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/./cube_poles.hpp(64,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 66 and this line 66
   remark #15346: vector dependence: assumed FLOW dependence between this line 66 and this line 66

   LOOP BEGIN at ../src/./cube_poles.hpp(65,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this line 66 and this line 66
      remark #15346: vector dependence: assumed FLOW dependence between this line 66 and this line 66
   LOOP END

   LOOP BEGIN at ../src/./cube_poles.hpp(65,4)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./cube_poles.hpp(43,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/./cube_poles.hpp(44,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::valarray<double>>>::resize(std::valarray<std::valarray<std::valarray<double>>> *, std::size_t, std::valarray<std::valarray<double>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079543 line 702 and  line 29
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079543 line 702

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1021,7)
      remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_30476 line 29
      remark #15346: vector dependence: assumed ANTI dependence between __b_30476 line 29 and  line 29
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,62)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(1028,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<std::valarray<double>>>::~valarray(std::valarray<std::valarray<std::valarray<double>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __b_1079543 line 702 and  line 29
   remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_1079543 line 702

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
      remark #15382: vectorization support: call to function free cannot be vectorized   [ ../src/new.cpp(29,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between  line 29 and __b_30476 line 29
      remark #15346: vector dependence: assumed ANTI dependence between __b_30476 line 29 and  line 29
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(std::remove_reference<boost::detail::add_pointer_impl<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::value_type>::no_ref_type &>::type *, const struct lambda [] *, const xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./fmmx_node.hpp(213,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(214,15)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(215,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 146 and _M_data line 146
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085210 line 146 and __p.1085210 line 146
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(215,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(215,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 219 and _M_data line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085248 line 219 and __p.1085248 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(215,15)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(217,12)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(217,12)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(217,12)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(217,12)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(std::remove_reference<boost::detail::add_pointer_impl<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::value_type>::no_ref_type &>::type *, const struct lambda [] *, const xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./fmmx_node.hpp(258,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(259,16)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(260,18)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(263,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(264,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 146 and _M_data line 146
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085210 line 146 and __p.1085210 line 146
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(264,17)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(264,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 219 and _M_data line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085248 line 219 and __p.1085248 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(264,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(267,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 269 and F64 line 271
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 271 and F64 line 269
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(274,4)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(276,39)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(277,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_ptr line 278 and _M_ptr line 278
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 278 and _M_data line 278
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(277,5)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(281,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 282 and F64 line 282
      remark #15346: vector dependence: assumed FLOW dependence between _M_ptr line 282 and _M_ptr line 282
   LOOP END

   LOOP BEGIN at ../src/./fmmx_node.hpp(281,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(286,10)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(286,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(286,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(286,10)
<Remainder, Multiversioned v2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/./fmmx_node.hpp(262,3)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(std::remove_reference<boost::detail::add_pointer_impl<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::value_type>::no_ref_type &>::type *, const struct lambda [] *, const xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type &)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/./fmmx_node.hpp(378,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 379 and I64 line 390
   remark #15346: vector dependence: assumed FLOW dependence between I64 line 390 and this line 379
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(394,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(395,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 146 and _M_data line 146
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085210 line 146 and __p.1085210 line 146
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(145,7) inlined into ../src/./fmmx_node.hpp(395,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(395,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 219 and _M_data line 219
      remark #15346: vector dependence: assumed ANTI dependence between __p.1085248 line 219 and __p.1085248 line 219
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./fmmx_node.hpp(395,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(395,59)
      remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.540 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(397,10)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(397,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(397,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/./fmmx_node.hpp(397,10)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: get_slice(std::gslice *, std::valarray<std::size_t> *, std::valarray<std::size_t> *, std::valarray<std::size_t> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(25,48)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __p.455162 line 219 and maxes line 219
   remark #15346: vector dependence: assumed ANTI dependence between maxes line 219 and __p.455162 line 219
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.tcc(218,7) inlined into ../src/./valarray.hpp(25,48)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(28,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between I64 line 29 and I64 line 30
   remark #15346: vector dependence: assumed ANTI dependence between I64 line 30 and I64 line 29
LOOP END

LOOP BEGIN at ../src/./valarray.hpp(28,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: gslice_row_major(std::gslice *, std::size_t, std::valarray<std::size_t> *, std::valarray<std::size_t> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(15,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1155,7) inlined into ../src/./valarray.hpp(16,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::vector(std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *, const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(322,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<hpx::util::tuple<xtree::dir_type<3> &, __gnu_cxx::__alloc_traits<std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::value_type &, void, void, void, void, void, void>>(hpx::threads::thread_function_type *, hpx::actions::continuation_type &, hpx::naming::address::address_type, hpx::util::tuple<xtree::dir_type<3> &, __gnu_cxx::__alloc_traits<std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::value_type &, void, void, void, void, void, void> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(681,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<struct lambda [] (), void>::type, struct lambda [] &>(boost::disable_if_c<false, hpx::lcos::future<void>>::type *, struct lambda [] &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(83,14) inlined into /home/dmarce1/packages/intel64/include/hpx/util/invoke.hpp(165,57)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(79,10) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(79,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(79,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.830 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into /home/dmarce1/packages/intel64/include/hpx/util/invoke.hpp(165,57)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END
===========================================================================

Begin optimization report for: lambda []::operator()(const struct lambda [] *)->void

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(758,23)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(759,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/node.hpp(759,50)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/counting_semaphore.hpp(130,17) inlined into ../src/node.hpp(760,24)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(762,23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(758,46)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(758,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::continuation<hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>, boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type, boost::detail::cpp0x_result_of_impl<boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type (hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *), void>::type>::async_impl(hpx::lcos::detail::continuation<hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>, boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type, boost::detail::cpp0x_result_of_impl<boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type (hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *), void>::type> *, const hpx::lcos::detail::shared_state_ptr<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_continuation.hpp(230,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_continuation.hpp(230,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>::~tuple(hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/tuple_5.hpp(1948,11)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<struct lambda [] (hpx::util::detail::qualify_as_impl<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::type *), void>::type, struct lambda [] &, hpx::util::detail::qualify_as_impl<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::type>(struct lambda [] &, hpx::util::detail::qualify_as_impl<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(319,3) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/invoke_5.hpp(143,17)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/invoke_5.hpp(143,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/invoke_5.hpp(143,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::silo_output<3>::silo_output(xtree::silo_output<3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/silo_output.hpp(109,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>>::~set(std::set<xtree::silo_output<3>::vertex, xtree::silo_output<3>::vertex_less_functor, std::allocator<xtree::silo_output<3>::vertex>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /usr/include/c++/4.9.0/bits/stl_set.h(90,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::list<xtree::silo_output<3>::silo_zone, std::allocator<xtree::silo_output<3>::silo_zone>>::~list(std::list<xtree::silo_output<3>::silo_zone, std::allocator<xtree::silo_output<3>::silo_zone>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 (boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type *, boost::mpl::identity<struct <unnamed>>::type, boost::mpl::identity<xtree::silo_output<3> *>::type, boost::mpl::identity<uint32_t>::type, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type *), void>::type, hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 &, boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type, boost::mpl::identity<struct <unnamed>>::type, boost::mpl::identity<xtree::silo_output<3> *>::type, uint32_t, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type>(hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 &, boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type &&, boost::mpl::identity<struct <unnamed>>::type &&, boost::mpl::identity<xtree::silo_output<3> *>::type &&, uint32_t &&, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/invoke_5.hpp(915,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::callable_vtable<hpx::threads::thread_function_sig>::invoke<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void, void, void>>>::type>::type>(void **, hpx::threads::thread_state_ex_enum &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::invoke_r<boost::detail::cpp0x_result_of_impl<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 (boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type *, boost::mpl::identity<struct <unnamed>>::type, boost::mpl::identity<xtree::silo_output<3> *>::type, boost::mpl::identity<int>::type, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type *), void>::type, hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 &, boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type, boost::mpl::identity<struct <unnamed>>::type, boost::mpl::identity<xtree::silo_output<3> *>::type, int, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type>(hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2 &, boost::mpl::identity<boost::shared_ptr<hpx::actions::continuation>>::type &&, boost::mpl::identity<struct <unnamed>>::type &&, boost::mpl::identity<xtree::silo_output<3> *>::type &&, int &&, boost::mpl::identity<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/invoke_5.hpp(915,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1::operator()<xtree::node<fmmx_node_type, 3>, boost::mpl::identity<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>::type, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>(const hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1 *, hpx::actions::continuation_type *, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, boost::mpl::identity<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>::type &&) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/construct_continuation_functions_5.hpp(183,30)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::callable_vtable<hpx::threads::thread_function_sig>::invoke<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void, void>>>::type>::type>(void **, hpx::threads::thread_state_ex_enum &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::load_array_type<hpx::util::portable_binary_iarchive>::invoke<std::valarray<double> [25]>(hpx::util::portable_binary_iarchive &, std::valarray<double> (&)[25])

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/array.hpp(75,7) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(591,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::interface_oarchive<hpx::util::portable_binary_oarchive>::operator<<<const std::valarray<double> [25]>(boost::archive::detail::interface_oarchive<hpx::util::portable_binary_oarchive> *, const std::valarray<double> (&)[25])

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/array.hpp(75,7) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/interface_oarchive.hpp(63,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::tree<fmmx_node_type, 3>::tree(xtree::tree<fmmx_node_type, 3> *, xtree::tree<fmmx_node_type, 3>::component_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/tree.hpp(39,2)
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 1.110 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/tree.hpp(52,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/tree.hpp(70,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/tree.hpp(73,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/tree.hpp(73,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::array<hpx::naming::id_type, 2UL>::~array(std::array<hpx::naming::id_type, 2UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::vector(std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> *, std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::size_type, const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 4.170 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::~vector(std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<action_get_new_node>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::checked_delete<hpx::actions::transfer_action<action_send_zones_to_silo>>(hpx::actions::transfer_action<action_send_zones_to_silo> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/core/checked_delete.hpp(34,12)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<action_set_func>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15389: vectorization support: reference this_543177 has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: boost::checked_delete<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type>>(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_ascend, void>::type, void>::type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/core/checked_delete.hpp(34,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15389: vectorization support: reference this_543177 has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: boost::checked_delete<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type>>(hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_neighbors_exchange_set, void>::type, void>::type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/core/checked_delete.hpp(34,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_exchange_set<es_func>, void>::type, void>::type>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15389: vectorization support: reference this_543177 has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_1>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<xtree::dir_type<3>>::type, hpx::util::decay<const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_exchange_set, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<unsigned long, xtree::indexer<3, 3, -1>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, void, void, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::neighbors_exchange_set(xtree::node<fmmx_node_type, 3> *, xtree::dir_type<3>, const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/counting_semaphore.hpp(117,17) inlined into ../src/node.hpp(693,21)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(695,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(696,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/node.hpp(694,51)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::operator=(std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *, const std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(191,24)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(193,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(334,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(203,56)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,19) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(203,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(334,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(208,8)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(210,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node_static_data<3UL, 8UL, 5UL>::~fmmx_node_static_data(xtree::fmmx::fmmx_node_static_data<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
      remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
      remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(30,8)
      remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::pointer>(std::_Vector_base<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::pointer, std::_Vector_base<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>(std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer, std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer>(std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer, std::_Vector_base<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer, hpx::lcos::promise<void, hpx::util::unused_type>>(std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer, std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer>(std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer, std::_Vector_base<hpx::lcos::promise<void, hpx::util::unused_type>, std::allocator<hpx::lcos::promise<void, hpx::util::unused_type>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>::pointer>(std::_Vector_base<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>::pointer, std::_Vector_base<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer>(std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer, std::_Vector_base<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer>(std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer, std::_Vector_base<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>(std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer, std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer>(std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer, std::_Vector_base<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, std::allocator<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>::pointer>(std::_Vector_base<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>::pointer, std::_Vector_base<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>::pointer>(std::_Vector_base<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>::pointer, std::_Vector_base<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer, hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>(std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer, std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_construct.h(93,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer>(std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer, std::_Vector_base<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>, std::allocator<hpx::lcos::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_descend<dfunc>, void>::type, void>::remote_result_type>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_construct.h(93,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::_Vector_base<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::pointer>(std::_Vector_base<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::pointer, std::_Vector_base<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: execute()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/main.cpp(69,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/main.cpp(80,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/main.cpp(86,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/main.cpp(86,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::regrid<rg_func>(xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(527,41)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(530,14)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/node.hpp(535,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(553,50)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(553,50)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 3.450 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(553,50)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(553,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(556,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::debranch(hpx::lcos::future<void> *, xtree::node<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(308,42)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(308,42)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 3.600 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(308,42)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(309,42)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(310,33)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(311,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(310,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(311,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(312,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(312,60)
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(314,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(323,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(323,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/node.hpp(306,54)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>::~vector(std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type>(hpx::lcos::detail::when_all_frame<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type, boost::range_iterator<boost::unwrap_reference<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>, 0>::deref<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>>>::type>::element>::type, void>::type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(257,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/when_all.hpp(229,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<bool>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_regrid<rg_func>, void>::type, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<bool>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_regrid<rg_func>, void>::type, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<bool>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_regrid<rg_func>, void>::type, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<bool>::type, hpx::actions::extract_action<hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_regrid<rg_func>, void>::type, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>::~vector(std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::branch(xtree::node<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(288,51)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(289,33)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(289,41)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(289,53)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(291,8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   LOOP END

   LOOP BEGIN at ../src/location.hpp(160,3) inlined into ../src/node.hpp(291,40)
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(161,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(161,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(164,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(164,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(164,9) ]
      remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(161,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(161,9) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 9.000 
      remark #15478: estimated potential speedup: 0.700 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/location.hpp(163,3) inlined into ../src/node.hpp(291,40)
   LOOP END
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(295,20)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(97,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(97,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(96,3) inlined into ../src/node.hpp(296,7)
LOOP END

LOOP BEGIN at ../src/node.hpp(297,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(299,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(300,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::get_gid(hpx::naming::gid_type *, hpx::components::detail::wrapper_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/wrapper_heap_list.hpp(37,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_new_node, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_new_node, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_new_node, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<hpx::naming::id_type>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_new_node, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> &, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>>::type, void>::type>(hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> &, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>>::type, void>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<hpx::naming::id_type>, std::allocator<hpx::lcos::future<hpx::naming::id_type>>>>::type, void>::type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/wait_all.hpp(183,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::operations_end(hpx::lcos::shared_future<void> *, xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(382,39)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(383,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(387,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::neighbors_exchange_get(xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(723,39)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(725,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(729,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/node.hpp(732,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(738,20)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(97,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(97,10) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(96,3) inlined into ../src/node.hpp(739,6)
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(740,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(741,25)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(742,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(103,3) inlined into ../src/node.hpp(742,49)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(751,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(754,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(741,48)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(770,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(770,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(741,35)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/atomic_count_gcc_x86.hpp(60,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::vector(std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>> *, std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::size_type, const std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 4.170 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> &, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::type, void>::type>(hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> &, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::type, void>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::type, void>::type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/wait_all.hpp(183,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>> &, void, void, void, void, void, void, void>>::await_range<boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>>::type, void>::type>(hpx::lcos::detail::wait_all_frame<hpx::util::tuple<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>> &, void, void, void, void, void, void, void>> *, boost::lazy_enable_if_c<true, boost::fusion::result_of::begin<const hpx::util::tuple<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>> &, void, void, void, void, void, void, void>>>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>>::type, void>::type, boost::range_iterator<boost::unwrap_reference<const std::vector<hpx::lcos::future<bool>, std::allocator<hpx::lcos::future<bool>>>>::type, void>::type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/wait_all.hpp(183,33)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::neighbors_ascend(xtree::node<fmmx_node_type, 3> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(702,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(706,34)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(707,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(708,27)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/indexer.hpp(71,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(73,3) inlined into ../src/node.hpp(708,27)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(708,50)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(709,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
      remark #15346: vector dependence: assumed FLOW dependence between j.919632 line 53 and j.919632 line 53
      remark #15346: vector dependence: assumed ANTI dependence between j.919632 line 53 and j.919632 line 53
   LOOP END

   LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(709,25)
   LOOP END
LOOP END

LOOP BEGIN at ../src/indexer.hpp(59,3) inlined into ../src/node.hpp(706,54)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(712,40)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/node.hpp(713,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(717,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(717,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(706,42)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(717,2)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::action<xtree::node<fmmx_node_type, 3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> &&>::type, void, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action1<struct <unnamed>, {(void (*)())xtree::node<fmmx_node_type, 3>::neighbors_ascend, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_continuation_thread_object_function_void<xtree::node<fmmx_node_type, 3>, hpx::util::tuple<__gnu_cxx::__alloc_traits<std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::value_type &, void, void, void, void, void, void, void>, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>(hpx::threads::thread_function_type *, hpx::actions::continuation_type *, struct <unnamed>, xtree::node<fmmx_node_type, 3> *, hpx::util::tuple<__gnu_cxx::__alloc_traits<std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::value_type &, void, void, void, void, void, void, void> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/construct_continuation_functions_5.hpp(223,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::get_sibling_of_child(hpx::naming::id_type *, xtree::node<fmmx_node_type, 3> *, xtree::child_index_type<3>, xtree::dir_type<3>)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(195,28)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/indexer.hpp(71,11) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(199,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(199,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(200,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(200,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(202,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(202,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(203,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(203,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(205,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(205,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(206,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(206,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(199,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(200,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(202,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(203,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(205,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/node.hpp(206,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/node.hpp(206,7) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 14 
   remark #15451: unmasked unaligned unit stride stores: 8 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 36 
   remark #15477: vector loop cost: 59.500 
   remark #15478: estimated potential speedup: 0.480 
   remark #15479: lightweight vector operations: 76 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/indexer.hpp(70,3) inlined into ../src/node.hpp(196,20)
LOOP END

LOOP BEGIN at ../src/node.hpp(197,2)
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(209,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
   remark #15346: vector dependence: assumed FLOW dependence between j.919469 line 53 and j.919469 line 53
   remark #15346: vector dependence: assumed ANTI dependence between j.919469 line 53 and j.919469 line 53
LOOP END

LOOP BEGIN at ../src/indexer.hpp(51,3) inlined into ../src/node.hpp(209,21)
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::resize(std::vector<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>> *, std::vector<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>, std::allocator<std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15382: vectorization support: call to function _ZNSt6vectorIN3hpx6naming7id_typeESaIS2_EEC1Ev cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15382: vectorization support: call to function _ZNSt6vectorIN3hpx6naming7id_typeESaIS2_EEC1Ev cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_construct.h(75,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::tree<fmmx_node_type, 3> *>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_this, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::tree<fmmx_node_type, 3> *>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_this, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<xtree::tree<fmmx_node_type, 3> *>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_this, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<xtree::tree<fmmx_node_type, 3> *>::type, hpx::actions::extract_action<xtree::tree<fmmx_node_type, 3>::action_get_this, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>::get_gid(hpx::naming::id_type *, const hpx::lcos::detail::promise_base<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type> *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(159,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>::requires_delete(hpx::lcos::detail::promise<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(278,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(282,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/promise.hpp(284,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::tree<fmmx_node_type, 3>::place_root(xtree::tree<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/tree.hpp(78,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/tree.hpp(78,10)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/tree.hpp(78,10)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into ../src/tree.hpp(78,10)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::vector(std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>> *, std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::size_type, const std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 75.000 
   remark #15478: estimated potential speedup: 0.500 
   remark #15479: lightweight vector operations: 11 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: xtree::tree<fmmx_node_type, 3>::output(const xtree::tree<fmmx_node_type, 3> *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/tree.hpp(136,40)
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 6.500 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/tree.hpp(137,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/tree.hpp(149,35)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into ../src/tree.hpp(155,66)
   remark #15382: vectorization support: call to function _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized   [ ../src/silo_output.hpp(26,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at ../src/tree.hpp(160,43)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/tree.hpp(164,5)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/tree.hpp(168,3)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/tree.hpp(170,3)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(144,38) inlined into ../src/tree.hpp(146,53)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/lcos/local/spinlock.hpp(59,0) ]
LOOP END

LOOP BEGIN at ../src/tree.hpp(157,35)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::operator=(std::vector<double, std::allocator<double>> *, const std::vector<double, std::allocator<double>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(191,24)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_current line 75 and _M_current line 75
   remark #15346: vector dependence: assumed ANTI dependence between __cur.857039 line 75 and __cur.857039 line 75
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(191,24)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(210,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __first_857700 line 75 and __first_857700 line 75
   remark #15346: vector dependence: assumed ANTI dependence between __cur.857700 line 75 and __cur.857700 line 75
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(210,8)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::get_output_zones(std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> *, xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(403,95)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(403,95)
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(403,95)
<Remainder>
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(403,95)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into ../src/./fmmx_node.hpp(404,54)
   remark #15382: vectorization support: call to function _ZNSt6vectorIdSaIdEEC1Ev cannot be vectorized   [ ../src/silo_output.hpp(26,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(405,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(405,38)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(405,38)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(407,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into ../src/./fmmx_node.hpp(408,30)
      remark #15389: vectorization support: reference __first_479612 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 3.000 
      remark #15478: estimated potential speedup: 0.870 
      remark #15479: lightweight vector operations: 2 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::vector(std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> *, const std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(322,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::base_action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::construct_thread_function<hpx::util::tuple<uint32_t &&, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> &, void, void, void, void, void, void>>(hpx::threads::thread_function_type *, hpx::actions::continuation_type &, hpx::naming::address::address_type, hpx::util::tuple<uint32_t &&, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> &, void, void, void, void, void, void> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/preprocessed/component_non_const_action_implementations_5.hpp(681,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::unique_function<hpx::threads::thread_function_sig, void, void>::unique_function<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type>(hpx::util::unique_function<hpx::threads::thread_function_sig, void, void> *, boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::action<xtree::silo_output<3>, hpx::util::unused_type, hpx::util::tuple<hpx::util::decay<hpx::components::component_type>::type, hpx::util::decay<std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>>::type, void, void, void, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::action2<struct <unnamed>, {(void (*)())xtree::silo_output<3>::send_zones_to_silo, 0L}, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::continuation_thread_object_function_void_2>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, struct <unnamed>, xtree::silo_output<3> *, unsigned int, std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>, void, void, void>>>::type &&, boost::disable_if_c<false, void>::type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/unique_function_template.hpp(271,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>>::~vector(std::vector<xtree::silo_output<3>::zone, std::allocator<xtree::silo_output<3>::zone>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::vector(std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>> *, const std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(322,4)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(53,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between __cur.1432735 line 912 and  line 53
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 53 and __cur.1432735 line 912
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::execute_operations(xtree::node<fmmx_node_type, 3> *, std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/node.hpp(412,29)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>>::~vector(std::vector<xtree::node<fmmx_node_type, 3>::operation_type, std::allocator<xtree::node<fmmx_node_type, 3>::operation_type>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::create(std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(581,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(590,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::create(std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(581,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(583,26)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 4
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15479: lightweight vector operations: 5 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(583,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(583,26)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 4
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15479: lightweight vector operations: 5 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(583,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(575,29)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(575,29)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(575,29)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(575,29)
<Remainder>
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(590,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::~managed_component(hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(460,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(460,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(460,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::create(std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(581,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(590,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>>::~list(std::list<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>, std::allocator<boost::shared_ptr<hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::heap_type>>> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /usr/include/c++/4.9.0/bits/stl_list.h(447,11)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::free(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, void *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(269,55)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::create(std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(581,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(590,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock>::alloc(hpx::util::one_size_heap_list<hpx::components::detail::fixed_wrapper_heap<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type, hpx::lcos::local::spinlock>, hpx::lcos::local::spinlock> *, std::size_t)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/one_size_heap_list.hpp(120,63)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::condition_variable::reset_queue_entry::~reset_queue_entry(hpx::lcos::local::detail::condition_variable::reset_queue_entry *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/intrusive/detail/common_slist_algorithms.hpp(37,26) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/detail/condition_variable.hpp(61,24)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::resize(std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>> *, std::vector<hpx::naming::id_type, std::allocator<hpx::naming::id_type>>::size_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 3.990 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(514,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(676,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(678,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::silo_output<3>::~silo_output(xtree::silo_output<3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into ../src/silo_output.hpp(115,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into ../src/silo_output.hpp(115,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/silo_output.hpp(115,2)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __mem_4283 line 547 and __mem_4283 line 68
   remark #15346: vector dependence: assumed FLOW dependence between __first_301127 line 68 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::emplace_back<std::remove_reference<std::string &>::type>(std::vector<std::string, std::allocator<std::string>> *, std::remove_reference<std::string &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_301127 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_301127 line 547
LOOP END
===========================================================================

Begin optimization report for: xtree::tree<fmmx_node_type, 3>::~tree(xtree::tree<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into ../src/tree.hpp(100,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into ../src/tree.hpp(100,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: xtree::load_balancer::~load_balancer(xtree::load_balancer *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable_policy.h(1984,7) inlined into ../src/load_balancer.cpp(36,1)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/load_balancer.cpp(36,1)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::initialize(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(151,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(151,38)
   remark #15389: vectorization support: reference __b_698745 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.290 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(151,38)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/./fmmx_node.hpp(152,4)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/./fmmx_node.hpp(153,22)
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(129,7) ]
   remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/location.hpp(129,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(129,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 1.200 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/location.hpp(128,3) inlined into ../src/./fmmx_node.hpp(153,22)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(154,36)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 156 and F64 line 156

   LOOP BEGIN at ../src/./fmmx_node.hpp(155,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type, boost::remove_reference<const xtree::node<fmmx_node_type, 3>::descend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::descend, 0L}>::type &>::type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<bool, bool>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type, boost::remove_reference<xtree::tree<fmmx_node_type, 3> *>::type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<fmmx_node_type, hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<fmmx_node_type, hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::id_type, hpx::naming::id_type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<xtree::node_type, hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<xtree::node_type, hpx::components::managed_component<xtree::node_type, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::node<fmmx_node_type, 3>::wrapped_type *>::type, hpx::actions::extract_action<xtree::node<fmmx_node_type, 3>::action_initialize, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<hpx::naming::gid_type, hpx::naming::gid_type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<xtree::tree_type, hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<xtree::tree_type, hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<xtree::silo_output_type, hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<xtree::silo_output_type, hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::detail::action_registration<hpx::actions::transfer_action<action0_initialize>>::create(boost::shared_ptr<hpx::actions::base_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
      remark #15389: vectorization support: reference __first_422981 has unaligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(704,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(703,7) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(177,17)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::continuation<hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>, boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type, boost::detail::cpp0x_result_of_impl<boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type (hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *), void>::type>::run(hpx::lcos::detail::continuation<hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>, boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type, boost::detail::cpp0x_result_of_impl<boost::disable_if_c<false, hpx::util::detail::unwrapped_impl<struct lambda []>>::type (hpx::lcos::future<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *), void>::type> *, const hpx::lcos::detail::shared_state_ptr<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::type &, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_continuation.hpp(213,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_continuation.hpp(213,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>>::set_result<hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>, void>::type>(hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>> *, hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>, void, void, void, void, void, void, void>, void>::type &&, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>>::result_type>::~value_or_error(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::shared_future<void>, std::allocator<hpx::lcos::shared_future<void>>>>::result_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(100,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::create<hpx::components::managed_component<fmmx_node_type, hpx::components::detail::this_type>>(hpx::naming::gid_type *, std::size_t, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(611,13) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/create_component.hpp(35,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::create<hpx::components::managed_component<xtree::tree_type, hpx::components::detail::this_type>>(hpx::naming::gid_type *, std::size_t, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(611,13) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/create_component.hpp(35,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::create<hpx::components::managed_component<xtree::silo_output_type, hpx::components::detail::this_type>>(hpx::naming::gid_type *, std::size_t, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(611,13) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/create_component.hpp(35,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::set_result<hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>, void>::type>(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>> *, hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>, void, void, void, void, void, void, void>, void>::type &&, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::reset(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>> *, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(306,19)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::result_type>::~value_or_error(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::result_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(100,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::result_type>::operator=(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::result_type> *, hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>, std::allocator<hpx::lcos::future<xtree::node<fmmx_node_type, 3>::ascend_function<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend_type, {(void (*)())xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::ascend, 0L}>::type>>>>::result_type> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(133,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(145,29)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::future<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::invalidate::~invalidate(hpx::lcos::future<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::invalidate *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/future.hpp(751,39)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>::~deferred_call_impl(hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/deferred_call.hpp(37,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::futures_factory<void (boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type *)>::futures_factory<hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>(hpx::lcos::local::futures_factory<void (boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type *)> *, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>::~deferred_call_impl(hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/deferred_call.hpp(37,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::futures_factory<void (boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type *)>::futures_factory<hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>(hpx::lcos::local::futures_factory<void (boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type *)> *, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(150,54)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>::~deferred_call_impl(hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/deferred_call.hpp(37,15)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::set_result<boost::exception_ptr>(hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, boost::exception_ptr &&, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::set_result<const boost::exception_ptr &>(hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, const boost::exception_ptr &, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::set_result<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::value_type>(hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type> *, hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::value_type &&, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::~value_or_error(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(100,13)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type>::operator=(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type> *, hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::multipoles_type>::result_type> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(133,17)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(144,25)
<Multiversioned v1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(144,25)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(144,25)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(144,25)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(145,29)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::set_result<hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>, void>::type>(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *, hpx::lcos::detail::when_all_result<hpx::util::tuple<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>, void, void, void, void, void, void, void>, void>::type &&, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(243,23)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::reset(hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>> *, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/detail/future_data.hpp(306,19)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::result_type>::~value_or_error(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::result_type> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(100,13)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::result_type>::operator=(hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::result_type> *, hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<std::vector<hpx::lcos::future<void>, std::allocator<hpx::lcos::future<void>>>>::result_type> &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(133,17)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/value_or_error.hpp(145,29)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::do_run(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,27)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::do_run(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,27)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::do_run(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 52.000 
   remark #15478: estimated potential speedup: 0.620 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,40)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(65,27)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>>::~task_object(hpx::lcos::local::detail::task_object<boost::detail::cpp0x_result_of_impl<void (hpx::util::decay<struct lambda []>::type *, hpx::util::detail::decay_unwrap<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &, hpx::util::decay<xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::expansions_type &>::type>::type *), void>::type, hpx::util::detail::deferred_call_impl<struct lambda [], hpx::util::tuple<std::array<std::valarray<double>, 25UL>, void, void, void, void, void, void, void>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/array(81,12) inlined into /home/dmarce1/packages/intel64/include/hpx/lcos/local/packaged_task.hpp(37,16)
   remark #15527: loop was not vectorized: function call to free cannot be vectorized   [ ../src/new.cpp(29,2) ]
LOOP END
===========================================================================

Begin optimization report for: xtree::fmmx::fmmx_node<3UL, 8UL, 5UL>::init_grid(xtree::fmmx::fmmx_node<3UL, 8UL, 5UL> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(427,38)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(427,38)
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.430 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(427,38)
<Remainder>
   remark #15388: vectorization support: reference __b_455049 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into ../src/./fmmx_node.hpp(427,38)
<Remainder>
LOOP END

LOOP BEGIN at ../src/./fmmx_node.hpp(429,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./fmmx_node.hpp(430,50)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./fmmx_node.hpp(430,50)
      remark #15389: vectorization support: reference __s.1101834 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference x0 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15389: vectorization support: reference __s.1101834 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference x0 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 23.000 
      remark #15478: estimated potential speedup: 2.670 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./fmmx_node.hpp(430,50)
   <Remainder>
      remark #15389: vectorization support: reference __s.1101834 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference x0 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15389: vectorization support: reference __s.1101834 has unaligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15388: vectorization support: reference x0 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/./fmmx_node.hpp(430,50)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::local<init_func>(xtree::node<fmmx_node_type, 3> *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(506,54)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 3.140 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(506,11)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/node.hpp(507,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(521,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: xtree::node<fmmx_node_type, 3>::initialize(xtree::node<fmmx_node_type, 3> *, const xtree::location<3> &, hpx::naming::id_type *, xtree::tree<fmmx_node_type, 3> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(511,29) inlined into ../src/node.hpp(220,62)
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15300: LOOP WAS VECTORIZED
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 32.500 
   remark #15478: estimated potential speedup: 3.180 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into ../src/node.hpp(220,19)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/node.hpp(223,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/node.hpp(228,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/node.hpp(243,3)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at ../src/node.hpp(248,2)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/node.hpp(241,2)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::__uninitialized_move_a<std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::_Tp_alloc_type>(std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::pointer, std::_Vector_base<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t, std::allocator<boost::basic_format<char, std::char_traits<char>, std::allocator<char>>::format_item_t>>::_Tp_alloc_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_uninitialized.h(286,14)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>(std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer, std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(151,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this_298321 line 293 and this_298321 line 71
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy<std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer>(std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer, std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_construct.h(126,7)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this_298321 line 293 and this_298321 line 71
LOOP END
===========================================================================

Begin optimization report for: std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::_M_insert_unique_node(std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>> *, std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::size_type, std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::__hash_code, std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::__node_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable.h(1951,7) inlined into /usr/include/c++/4.9.0/bits/hashtable.h(1563,8)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::_M_insert<const std::__detail::_Insert_base<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::value_type &, std::__detail::_Insert_base<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::__node_gen_type>(std::_Hashtable<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>> *, const std::__detail::_Insert_base<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::value_type &, const std::__detail::_Insert_base<xtree::location<3>, xtree::location<3>, std::allocator<xtree::location<3>>, std::__detail::_Identity, std::equal_to<xtree::location<3>>, std::hash<xtree::location<3>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__uset_traits<true>>::__node_gen_type &, std::true_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/location.hpp(24,3) inlined into /usr/include/c++/4.9.0/bits/hashtable.h(1662,29)
   remark #15389: vectorization support: reference __v has unaligned access   [ ../src/location.hpp(25,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/location.hpp(25,4) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 0.190 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/hashtable.h(1388,57) inlined into /usr/include/c++/4.9.0/bits/hashtable.h(1665,21)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::mpl::identity<xtree::load_balancer *>::type, hpx::actions::extract_action<xtree::load_balancer::action_get_ptr, void>::remote_result_type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<int32_t, int32_t>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::managed_component<hpx::lcos::base_lco_with_value<boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type, boost::remove_reference<hpx::util::detail::value_or_error<hpx::lcos::detail::future_data<void>::result_type>::value_type>::type>, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: hpx::util::reinitializable_static<hpx::components::detail::heap_factory<xtree::load_balancer, hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type>::heap_type, hpx::components::detail::heap_factory<xtree::load_balancer, hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>::derived_type>::wrapper_heap_tag, 1UL>::destruct()

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/list.tcc(70,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/reinitializable_static.hpp(78,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::bad_exception> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::bad_typeid> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::bad_cast> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::bad_alloc> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::range_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::out_of_range> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::length_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>, boost::tag_original_exception_type, const std::type_info *>(const boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error> &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::set_info<boost::unknown_exception, boost::tag_original_exception_type, const std::type_info *>(const boost::unknown_exception &, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(173,25)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::string_stub_dump<boost::error_info<boost::tag_original_exception_type, const std::type_info *>>(std::string *, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/exception/detail/object_hex_dump.hpp(40,52) inlined into /home/dmarce1/packages/intel64/include/boost/exception/to_string_stub.hpp(85,27)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::runtime_error>(boost::exception_ptr *, const std::runtime_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::ios_base::failure>(boost::exception_ptr *, const std::ios_base::failure &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::underflow_error>(boost::exception_ptr *, const std::underflow_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::overflow_error>(boost::exception_ptr *, const std::overflow_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::range_error>(boost::exception_ptr *, const std::range_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::logic_error>(boost::exception_ptr *, const std::logic_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::length_error>(boost::exception_ptr *, const std::length_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::invalid_argument>(boost::exception_ptr *, const std::invalid_argument &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception<std::domain_error>(boost::exception_ptr *, const std::domain_error &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(274,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(272,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::too_few_args>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::too_few_args>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_few_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_few_args> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::too_many_args>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::too_many_args>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_many_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_many_args> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<hpx::thread_interrupted>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<hpx::thread_interrupted>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<hpx::thread_interrupted>::~error_info_injector(boost::exception_detail::error_info_injector<hpx::thread_interrupted> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<hpx::thread_interrupted>::~error_info_injector(boost::exception_detail::error_info_injector<hpx::thread_interrupted> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<hpx::thread_interrupted>::~error_info_injector(boost::exception_detail::error_info_injector<hpx::thread_interrupted> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::bad_function_call>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::bad_function_call>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_function_call> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::range_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::length_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::bad_format_string>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::io::bad_format_string>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::bad_format_string>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::bad_format_string> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<hpx::util::portable_binary_iarchive_exception>::~error_info_injector(boost::exception_detail::error_info_injector<hpx::util::portable_binary_iarchive_exception> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::bad_weak_ptr>::type>::~clone_impl(boost::exception_detail::clone_impl<boost::exception_detail::enable_error_info_return_type<boost::bad_weak_ptr>::type> *, const long *const *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(459,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_weak_ptr>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_weak_ptr> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_weak_ptr>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_weak_ptr> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_weak_ptr>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_weak_ptr> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::_M_range_initialize<boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default>>(std::vector<std::string, std::allocator<std::string>> *, boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default> *, boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default> *, std::input_iterator_tag)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/algorithm/string/find_iterator.hpp(328,34) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(1266,19)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::components::server::create<hpx::components::managed_component<xtree::load_balancer, hpx::components::detail::this_type>>(hpx::naming::gid_type *, std::size_t, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/managed_component_base.hpp(611,13) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/components/server/create_component.hpp(35,9)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::condition_variable::notify_all<hpx::lcos::local::spinlock::scoped_lock>(hpx::lcos::local::detail::condition_variable *, hpx::lcos::local::spinlock::scoped_lock &, hpx::error_code &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/detail/condition_variable.hpp(140,13)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::lcos::local::detail::condition_variable::abort_all<hpx::lcos::local::no_mutex>(hpx::lcos::local::detail::condition_variable *, hpx::lcos::local::no_mutex &)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/lcos/local/detail/condition_variable.hpp(171,13)
   remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ /home/dmarce1/packages/intel64/include/hpx/runtime/threads/detail/tagged_thread_state.hpp(39,24) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::_M_get_insert_hint_unique_pos(std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::const_iterator, const std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1545,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1561,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1577,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::add_msg(const hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type> *, const hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/cache_before_init.hpp(138,47)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::emplace_back<std::remove_reference<std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::value_type &>::type>(std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>> *, std::remove_reference<std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::value_type &>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(101,4)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between this_298321 line 71 and this_298321 line 547
   remark #15346: vector dependence: assumed ANTI dependence between this_298321 line 547 and this_298321 line 71
LOOP END
===========================================================================

Begin optimization report for: hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::read_msg(hpx::util::logging::gather_holder<hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::self_type, hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::gather_type> *, const hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_> *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/basic_ios.h(454,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(77,112)
   remark #15389: vectorization support: reference this_257731 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/basic_ios.h(454,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(77,112)
   remark #15389: vectorization support: reference this_257731 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/streambuf(463,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(77,112)
   remark #15389: vectorization support: reference this_257750 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 9.000 
   remark #15478: estimated potential speedup: 1.140 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_get_insert_unique_pos(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_copy(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1216,4)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(34,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_few_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_few_args> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_few_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_few_args> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_many_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_many_args> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::too_many_args>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::too_many_args> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_function_call> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(boost::exception_detail::error_info_injector<boost::bad_function_call> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::runtime_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::ios_base::failure> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::underflow_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::overflow_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::range_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::range_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::range_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::logic_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::length_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::length_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::length_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::invalid_argument> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(222,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error>::~current_exception_std_exception_wrapper(boost::exception_detail::current_exception_std_exception_wrapper<std::domain_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/detail/exception_ptr.hpp(224,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::bad_format_string>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::bad_format_string> *const)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(336,13)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::io::bad_format_string>::~error_info_injector(boost::exception_detail::error_info_injector<boost::io::bad_format_string> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector(boost::exception_detail::error_info_injector<boost::lock_error> *)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/exception.hpp(338,17)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container> *, const boost::exception_detail::error_info_container_impl *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(105,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(119,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(158,19)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::release(const boost::exception_detail::error_info_container_impl *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(148,21)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::set(boost::exception_detail::error_info_container_impl *, const boost::shared_ptr<boost::exception_detail::error_info_base> &, const boost::exception_detail::type_info_ &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/typeinfo(116,35) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(87,22)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::get(boost::shared_ptr<boost::exception_detail::error_info_base> *, const boost::exception_detail::error_info_container_impl *, const boost::exception_detail::type_info_ &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/typeinfo(116,35) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(94,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::diagnostic_information(const boost::exception_detail::error_info_container_impl *, const char *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(113,91)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================
