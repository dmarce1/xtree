
Begin optimization report for: exafmm_kernel<1L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(57,12) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 104 
   remark #15477: vector loop cost: 81.000 
   remark #15478: estimated potential speedup: 4.400 
   remark #15479: lightweight vector operations: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(57,12) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(91,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 4.180 
   remark #15479: lightweight vector operations: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(110,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(119,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,7) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(119,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<real>>::~valarray(std::valarray<std::valarray<real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1296 
   remark #15477: vector loop cost: 260.500 
   remark #15478: estimated potential speedup: 4.960 
   remark #15479: lightweight vector operations: 222 
   remark #15482: vectorized math library calls: 7 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15315: loop was not vectorized: low trip count
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 192.000 
            remark #15478: estimated potential speedup: 0.190 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15315: loop was not vectorized: low trip count
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 192.000 
            remark #15478: estimated potential speedup: 0.190 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 12 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1854 
   remark #15477: vector loop cost: 381.500 
   remark #15478: estimated potential speedup: 4.840 
   remark #15479: lightweight vector operations: 386 
   remark #15482: vectorized math library calls: 9 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 20 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2536 
   remark #15477: vector loop cost: 532.250 
   remark #15478: estimated potential speedup: 4.750 
   remark #15479: lightweight vector operations: 599 
   remark #15482: vectorized math library calls: 11 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 30 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3340 
   remark #15477: vector loop cost: 712.750 
   remark #15478: estimated potential speedup: 4.670 
   remark #15479: lightweight vector operations: 861 
   remark #15482: vectorized math library calls: 13 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 42 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4269 
   remark #15477: vector loop cost: 923.000 
   remark #15478: estimated potential speedup: 4.600 
   remark #15479: lightweight vector operations: 1172 
   remark #15482: vectorized math library calls: 15 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 56 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5321 
   remark #15477: vector loop cost: 1163.000 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 1532 
   remark #15482: vectorized math library calls: 17 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L_V(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(38,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(42,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(43,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(44,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(41,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(51,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(66,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(85,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(86,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(92,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(92,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(91,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(94,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(95,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(111,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(110,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(120,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(121,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(119,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(124,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30798 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(130,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2M(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(143,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(144,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(144,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(145,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(146,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(151,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
         remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162

         LOOP BEGIN at ../src/exafmm.cpp(152,57)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed FLOW dependence between M_r line 162 and M_r line 162
            remark #15346: vector dependence: assumed ANTI dependence between M_r line 162 and M_r line 162
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::L2L(std::valarray<real> &, const std::valarray<real> &, const std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(175,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(210,2) inlined into ../src/exafmm.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 216 and _M_data line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3) inlined into ../src/exafmm.cpp(176,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 227 and _M_data line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 229 and _M_data line 227
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

   LOOP BEGIN at ../src/exafmm.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between F64 line 192 and F64 line 198
      remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 198 and _M_elems line 192

      LOOP BEGIN at ../src/exafmm.cpp(183,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed ANTI dependence between n line 184 and n line 183
         remark #15346: vector dependence: assumed FLOW dependence between n line 183 and n line 184

         LOOP BEGIN at ../src/exafmm.cpp(184,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed FLOW dependence between L_r line 193 and L_r line 193
            remark #15346: vector dependence: assumed ANTI dependence between L_r line 193 and L_r line 193
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(210,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 216 and F64 line 229
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 216

   LOOP BEGIN at ../src/exafmm.cpp(224,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 227 and F64 line 229
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 229 and F64 line 227
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalLocal(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(249,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 255 and F64 line 268
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 255

   LOOP BEGIN at ../src/exafmm.cpp(263,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 266 and F64 line 268
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 268 and F64 line 266
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(285,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 286 and _M_elems line 286
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(289,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(290,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(294,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(297,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(300,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(303,4) inlined into ../src/exafmm.cpp(281,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(310,2) inlined into ../src/exafmm.cpp(281,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(311,3) inlined into ../src/exafmm.cpp(281,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

      LOOP BEGIN at ../src/exafmm.cpp(312,4) inlined into ../src/exafmm.cpp(281,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 318 and _M_elems line 318

         LOOP BEGIN at ../src/exafmm.cpp(313,5) inlined into ../src/exafmm.cpp(281,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(318,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(319,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(319,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
