
Begin optimization report for: exafmm_kernel<5L>::cart2sph(real &, real &, real &, std::valarray<double> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(98,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(98,25)
   remark #15388: vectorization support: reference __s.377394 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.377394 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(98,25)
<Remainder>
   remark #15388: vectorization support: reference __s.377394 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.377394 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(98,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M(std::valarray<complex> &, const std::valarray<complex> &, const std::valarray<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(114,29)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(114,29)
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 5.750 
   remark #15478: estimated potential speedup: 3.150 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(114,29)
<Remainder>
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(114,29)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(117,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(117,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(117,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(117,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(384,2) inlined into ../src/exafmm.cpp(118,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between Ynm line 389 and Ynm line 399
   remark #15346: vector dependence: assumed OUTPUT dependence between Ynm line 399 and Ynm line 389

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(118,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between Ynm line 398 and Ynm line 399
      remark #15346: vector dependence: assumed OUTPUT dependence between Ynm line 399 and Ynm line 398
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(118,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(118,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(118,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(119,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(120,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(124,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between _M_value line 383 and _M_value line 1297
         remark #15346: vector dependence: assumed FLOW dependence between __x_377876 line 1297 and __x_377876 line 383

         LOOP BEGIN at ../src/exafmm.cpp(125,36)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_value line 383 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between __x_377876 line 1297 and __x_377876 line 383
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(134,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_value line 1201 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between __z_377901 line 1297 and __z_377901 line 1201
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M_vec(std::valarray<std::valarray<complex>> &, const std::valarray<std::valarray<complex>> &, real, real, real, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(159,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 161 and _M_start line 164
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 164 and _M_start line 161

   LOOP BEGIN at ../src/exafmm.cpp(160,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 161 and _M_start line 164
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 164 and _M_start line 161
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(160,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(177,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 182 and _M_start line 196
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 196 and _M_start line 182

   LOOP BEGIN at ../src/exafmm.cpp(190,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 193 and _M_start line 196
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_start line 196 and _M_start line 193
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(190,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(190,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(190,3)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(206,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(207,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(210,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(211,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(215,7)
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(227,22) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(227,22) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(228,22) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(228,22) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15458: masked indexed (or gather) loads: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 229 
               remark #15477: vector loop cost: 98.750 
               remark #15478: estimated potential speedup: 2.310 
               remark #15479: lightweight vector operations: 163 
               remark #15480: medium-overhead vector operations: 1 
               remark #15487: type converts: 1 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(215,7)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(235,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between CiM line 1241 and CiM line 1244
   remark #15346: vector dependence: assumed FLOW dependence between CiM line 1244 and CiM line 1241

   LOOP BEGIN at ../src/exafmm.cpp(236,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between CiM line 1241 and CiM line 1244
      remark #15346: vector dependence: assumed FLOW dependence between CiM line 1244 and CiM line 1241
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::~vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_379858 line 160 and  line 110
   remark #15346: vector dependence: assumed FLOW dependence between  line 110 and __first_379858 line 160
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::vector(std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>> *, std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::size_type, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::value_type &, const std::vector<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(200,8) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(292,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L(std::valarray<complex> &, const std::valarray<complex> *, const std::valarray<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(65,29)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(65,29)
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 5.750 
   remark #15478: estimated potential speedup: 3.150 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(65,29)
<Remainder>
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(65,29)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(67,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(67,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(67,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(67,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(419,2) inlined into ../src/exafmm.cpp(68,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 424 and _M_data line 434
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 434 and _M_data line 424

   LOOP BEGIN at ../src/exafmm.cpp(430,3) inlined into ../src/exafmm.cpp(68,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 433 and _M_data line 434
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 434 and _M_data line 433
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3) inlined into ../src/exafmm.cpp(68,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3) inlined into ../src/exafmm.cpp(68,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3) inlined into ../src/exafmm.cpp(68,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(69,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 73 and _M_value line 90
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 90 and _M_value line 73

   LOOP BEGIN at ../src/exafmm.cpp(70,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 73 and _M_value line 90
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 90 and _M_value line 73

      LOOP BEGIN at ../src/exafmm.cpp(74,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between _M_value line 1297 and _M_value line 1297
         remark #15346: vector dependence: assumed FLOW dependence between _M_value line 1297 and _M_value line 1297

         LOOP BEGIN at ../src/exafmm.cpp(75,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between CjM line 1201 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between _M_value line 1297 and CjM line 1201
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(82,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between CjM line 383 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between _M_value line 1297 and CjM line 383
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::L2L(std::valarray<complex> &, const std::valarray<complex> &, const std::valarray<double> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(344,29)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(344,29)
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 5.750 
   remark #15478: estimated potential speedup: 3.150 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(344,29)
<Remainder>
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(344,29)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(346,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(346,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(346,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(346,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(384,2) inlined into ../src/exafmm.cpp(347,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 389 and _M_data line 399
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 399 and _M_data line 389

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(347,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 398 and _M_data line 399
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 399 and _M_data line 398
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(347,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(347,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3) inlined into ../src/exafmm.cpp(347,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(348,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(349,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../src/exafmm.cpp(353,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between _M_value line 1297 and _M_value line 1297
         remark #15346: vector dependence: assumed FLOW dependence between _M_value line 1297 and _M_value line 1297

         LOOP BEGIN at ../src/exafmm.cpp(355,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_value line 1201 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between __z_377901 line 1297 and __z_377901 line 1201
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(361,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_value line 383 and _M_value line 1297
            remark #15346: vector dependence: assumed FLOW dependence between __x_377876 line 1297 and __x_377876 line 383
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalMultipole(real, real, real, std::valarray<complex> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(384,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 389 and _M_value line 399
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 399 and _M_value line 389

   LOOP BEGIN at ../src/exafmm.cpp(395,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 398 and _M_value line 399
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 399 and _M_value line 398
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(395,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalLocal(real, real, real, std::valarray<complex> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(419,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 424 and _M_value line 434
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 434 and _M_value line 424

   LOOP BEGIN at ../src/exafmm.cpp(430,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 433 and _M_value line 434
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_value line 434 and _M_value line 433
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(430,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(450,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 451 and _M_data line 451
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(454,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(455,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(459,4)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(460,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(459,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(462,4)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(463,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(462,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(466,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(468,4)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(469,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(468,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(475,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(476,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 481 and _M_data line 484
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 484 and _M_data line 481

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between _M_data line 481 and _M_data line 484
         remark #15346: vector dependence: assumed ANTI dependence between _M_data line 484 and _M_data line 481

         LOOP BEGIN at ../src/exafmm.cpp(478,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 481 and _M_data line 484
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 484 and _M_data line 481
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(450,2) inlined into ../src/exafmm.cpp(446,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_data line 451 and _M_data line 451
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(454,2) inlined into ../src/exafmm.cpp(446,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(455,3) inlined into ../src/exafmm.cpp(446,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(459,4) inlined into ../src/exafmm.cpp(446,19)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(460,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(459,4) inlined into ../src/exafmm.cpp(446,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(462,4) inlined into ../src/exafmm.cpp(446,19)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(463,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(462,4) inlined into ../src/exafmm.cpp(446,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(446,19)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(466,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(446,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(468,4) inlined into ../src/exafmm.cpp(446,19)
         remark #15410: vectorization support: conversion from int to float will be emulated   [ ../src/exafmm.cpp(469,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 17.000 
         remark #15478: estimated potential speedup: 1.350 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(468,4) inlined into ../src/exafmm.cpp(446,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(475,2) inlined into ../src/exafmm.cpp(446,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(476,3) inlined into ../src/exafmm.cpp(446,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _M_data line 481 and _M_data line 484
      remark #15346: vector dependence: assumed ANTI dependence between _M_data line 484 and _M_data line 481

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(446,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between _M_data line 481 and _M_data line 484
         remark #15346: vector dependence: assumed ANTI dependence between _M_data line 484 and _M_data line 481

         LOOP BEGIN at ../src/exafmm.cpp(478,5) inlined into ../src/exafmm.cpp(446,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 481 and _M_data line 484
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 484 and _M_data line 481
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, const std::vector<double, std::allocator<double>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(322,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_current line 75 and _M_current line 75
   remark #15346: vector dependence: assumed ANTI dependence between __cur.379513 line 75 and __cur.379513 line 75
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(322,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer>(std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer, std::_Vector_base<std::vector<double, std::allocator<double>>, std::allocator<std::vector<double, std::allocator<double>>>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/ext/new_allocator.h(110,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first line 160 and  line 110
   remark #15346: vector dependence: assumed FLOW dependence between  line 110 and __first line 160
LOOP END
===========================================================================

Begin optimization report for: boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>, boost::algorithm::detail::find_iterator_base<boost::range_iterator<const char *, void>::type>::match_type, boost::algorithm::detail::find_iterator_base<boost::range_iterator<const char *, void>::type>::input_iterator_type, boost::algorithm::detail::find_iterator_base<boost::range_iterator<const char *, void>::type>::input_iterator_type>::invoke(boost::detail::function::function_buffer &, boost::algorithm::detail::find_iterator_base<boost::range_iterator<const char *, void>::type>::input_iterator_type, boost::algorithm::detail::find_iterator_base<boost::range_iterator<const char *, void>::type>::input_iterator_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(118,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/finder.hpp(578,29) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(960,7) inlined into /home/dmarce1/packages/intel64/include/boost/function/function_template.hpp(132,23)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>>::element>::destroy(const boost::serialization::extended_type_info_typeid<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>>::element> *, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/extended_type_info_typeid.hpp(133,9)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>>::element>::destroy(const boost::archive::detail::iserializer<hpx::util::portable_binary_iarchive, boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>::deref<boost::fusion::hpx_tuple_iterator<hpx::util::tuple<hpx::util::decay<boost::remove_reference<std::valarray<std::valarray<complex>>>::type &&>::type, void, void, void, void, void, void, void>, 0>>::element> *, void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/iserializer.hpp(119,9)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::load<hpx::util::portable_binary_iarchive, std::valarray<complex>>(hpx::util::portable_binary_iarchive &, std::valarray<std::valarray<complex>> &, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/array.hpp(75,7) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(56,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::serialization::load<hpx::util::portable_binary_iarchive, complex>(hpx::util::portable_binary_iarchive &, std::valarray<complex> &, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
   remark #15388: vectorization support: reference U17c has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(111,19) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 3.660 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(54,5)
<Remainder>
   remark #15387: vectorization support: scalar type occupies entire vector
LOOP END

LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_iarchive.hpp(302,44) inlined into /home/dmarce1/packages/intel64/include/boost/serialization/valarray.hpp(56,8)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/basic_binary_iprimitive.hpp(81,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between ar line 162 and this_430318 line 82
   remark #15346: vector dependence: assumed FLOW dependence between this_430318 line 82 and ar line 162
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<std::valarray<std::valarray<complex>>, std::remove_reference<hpx::actions::transfer_action<M2L_interior_action>::arguments_type &>::type>::type>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, hpx::util::detail::qualify_as_impl<std::valarray<std::valarray<complex>>, std::remove_reference<hpx::actions::transfer_action<M2L_interior_action>::arguments_type &>::type>::type> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/serialization/array.hpp(75,7) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::valarray<complex>>::save_object_data(const boost::archive::detail::oserializer<boost::archive::detail::save_non_pointer_type<hpx::util::portable_binary_oarchive>::archive_type, std::valarray<complex>> *, boost::archive::detail::basic_oarchive &, const void *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/hpx/util/portable_binary_oarchive.hpp(285,44) inlined into /home/dmarce1/packages/intel64/include/boost/archive/detail/oserializer.hpp(148,5)
   remark #15382: vectorization support: call to function (unknown) cannot be vectorized   [ /home/dmarce1/packages/intel64/include/hpx/util/basic_binary_oprimitive.hpp(75,43) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between ar line 144 and this_436431 line 74
   remark #15346: vector dependence: assumed FLOW dependence between this_436431 line 74 and ar line 144
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::plain_base_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::plain_base_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::delete_<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(93,17)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::vtable::destruct<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>>::type>::type>(void **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/vtable.hpp(82,23)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::callable_vtable<hpx::threads::thread_function_sig>::invoke<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::plain_base_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>>>::type>::type>(void **, hpx::threads::thread_state_ex_enum &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_interior(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(22,70)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(22,70)
   remark #15388: vectorization support: reference U17c has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(111,19) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 3.660 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(22,70)
<Remainder>
   remark #15387: vectorization support: scalar type occupies entire vector
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into ../src/exafmm.cpp(22,98)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into ../src/exafmm.cpp(22,98)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(22,98)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into ../src/exafmm.cpp(22,98)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(30,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../src/exafmm.cpp(35,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 41 and _M_data line 41
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 41 and _M_data line 41

      LOOP BEGIN at ../src/exafmm.cpp(36,6)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 41 and _M_data line 41
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 41 and _M_data line 41

         LOOP BEGIN at ../src/exafmm.cpp(37,7)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 42 and _M_data line 44
            remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 44 and _M_data line 42
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(37,7)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into ../src/exafmm.cpp(50,28)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(51,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this_377260 line 53 and this_377260 line 1298
      remark #15346: vector dependence: assumed FLOW dependence between __p1_376978 line 1298 and __p1_376978 line 53

      LOOP BEGIN at ../src/exafmm.cpp(52,6)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between this_377260 line 53 and this_377260 line 1298
         remark #15346: vector dependence: assumed FLOW dependence between __p1_376978 line 1298 and __p1_376978 line 53
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(56,4)
      remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(24,2)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(27,3)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_vec(std::valarray<std::valarray<complex>> *, const std::valarray<complex> *, const std::valarray<double> &, const std::valarray<double> &, const std::valarray<double> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(251,67)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(251,67)
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 3.660 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into ../src/exafmm.cpp(251,67)
<Remainder>
   remark #15387: vectorization support: scalar type occupies entire vector
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(254,2)
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(255,6) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(256,14) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(256,14) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(256,8) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(257,12) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(257,12) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(257,6) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 310 
   remark #15477: vector loop cost: 57.750 
   remark #15478: estimated potential speedup: 5.360 
   remark #15479: lightweight vector operations: 31 
   remark #15482: vectorized math library calls: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(254,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(263,12) ]
   remark #15389: vectorization support: reference _M_start has unaligned access   [ ../src/exafmm.cpp(264,12) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(267,24) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(270,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(271,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(281,4) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(270,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(271,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(281,4) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(270,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(271,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(281,4) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(270,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(271,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(281,4) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(294,5) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(270,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(271,20) ]
   remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(281,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(281,4) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 57 
   remark #15449: unmasked aligned unit stride stores: 60 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3395 
   remark #15477: vector loop cost: 702.750 
   remark #15478: estimated potential speedup: 4.810 
   remark #15479: lightweight vector operations: 925 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 11 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(269,3)

      LOOP BEGIN at ../src/exafmm.cpp(284,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(284,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(284,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(284,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(307,11) ]
         remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(308,11) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(307,11) ]
         remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(308,11) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(310,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(311,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(322,6)
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(323,73) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(323,73) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(324,73) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(324,73) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(325,13) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(325,13) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(326,13) ]
               remark #15388: vectorization support: reference _M_start has aligned access   [ ../src/exafmm.cpp(326,13) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 69 
               remark #15477: vector loop cost: 10.000 
               remark #15478: estimated potential speedup: 6.830 
               remark #15479: lightweight vector operations: 40 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(322,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(331,4)
      <Peeled>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(331,4)
         remark #15389: vectorization support: reference _M_data has unaligned access   [ /usr/include/c++/4.9.0/complex(1241,37) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ /usr/include/c++/4.9.0/complex(1241,37) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15458: masked indexed (or gather) loads: 2 
         remark #15459: masked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 24 
         remark #15477: vector loop cost: 136.000 
         remark #15478: estimated potential speedup: 0.700 
         remark #15479: lightweight vector operations: 10 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(331,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
      remark #15388: vectorization support: reference __first_378905 has aligned access   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(762,3) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.280 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algobase.h(760,7) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(279,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<complex>>::valarray(std::valarray<std::valarray<complex>> *, const std::valarray<complex> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(617,62)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(145,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<complex>>::~valarray(std::valarray<std::valarray<complex>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::callable_vtable<hpx::threads::thread_function_sig>::invoke<hpx::util::decay<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>>::type>::type>(void **, hpx::threads::thread_state_ex_enum &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/vtable/preprocessed/callable_vtable_5.hpp(21,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<M2L_interior_action>::~transfer_action(hpx::actions::transfer_action<M2L_interior_action> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(484,9)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>::~tuple(hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/preprocessed/tuple_5.hpp(1948,11)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<M2L_interior_action>::~transfer_action(hpx::actions::transfer_action<M2L_interior_action> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(481,9)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<M2L_interior_action>::get_thread_function(hpx::threads::thread_function_type *, hpx::actions::transfer_action<M2L_interior_action> *, hpx::naming::address::address_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(531,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::plain_base_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::plain_base_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::thread_function>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::tuple_member<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, void>::~tuple_member(hpx::util::detail::tuple_member<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, void> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/tuple.hpp(84,16)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::actions::transfer_action<M2L_interior_action>::get_thread_function(hpx::threads::thread_function_type *, hpx::actions::transfer_action<M2L_interior_action> *, hpx::actions::continuation_type &, hpx::naming::address::address_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/runtime/actions/action_support.hpp(554,20)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>::~bound(hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/bind.hpp(364,15)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: hpx::util::detail::function_base<hpx::util::detail::unique_function_vtable_ptr<hpx::threads::thread_function_sig, void, void>, hpx::threads::thread_state_enum (hpx::threads::thread_state_ex_enum)>::assign<boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>>::type>(hpx::util::detail::function_base<hpx::util::detail::unique_function_vtable_ptr<hpx::threads::thread_function_sig, void, void>, hpx::threads::thread_state_enum (hpx::threads::thread_state_ex_enum)> *, boost::disable_if_c<false, hpx::util::detail::bound<hpx::util::detail::one_shot_wrapper<hpx::actions::detail::continuation_thread_function_5<hpx::actions::action<hpx::components::server::plain_function<boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>, std::valarray<std::valarray<complex>>, hpx::util::tuple<hpx::util::decay<std::valarray<std::valarray<complex>>>::type, hpx::util::decay<real>::type, hpx::util::decay<int64_t>::type, hpx::util::decay<bool>::type, hpx::util::decay<bool>::type, void, void, void>, boost::mpl::if_<boost::is_same<hpx::actions::detail::this_type, hpx::actions::detail::this_type>, hpx::actions::plain_result_action5<std::valarray<std::valarray<complex>>, std::valarray<std::valarray<complex>>, real, int64_t, bool, bool, exafmm_kernel<5L>::M2L_interior, hpx::actions::detail::this_type>, hpx::actions::detail::this_type>::type>::derived_type>>, hpx::util::tuple<boost::shared_ptr<hpx::actions::continuation>, void (*)(std::valarray<std::valarray<complex>> *, std::valarray<std::valarray<complex>> *, double, long, bool, bool), std::valarray<std::valarray<complex>>, double, long, bool, bool, void>>>::type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /home/dmarce1/packages/intel64/include/hpx/util/detail/basic_function.hpp(106,21)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::_M_emplace_back_aux<const std::vector<std::string, std::allocator<std::string>>::value_type &>(std::vector<std::string, std::allocator<std::string>> *, const std::vector<std::string, std::allocator<std::string>>::value_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(418,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(433,2)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_320855 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_320855 line 547
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::_M_emplace_back_aux<std::move_iterator<std::_Vector_base<std::string, std::allocator<std::string>>::pointer>::value_type>(std::vector<std::string, std::allocator<std::string>> *, std::move_iterator<std::_Vector_base<std::string, std::allocator<std::string>>::pointer>::value_type &&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(418,10)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/vector.tcc(433,2)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_320855 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_320855 line 547
LOOP END
===========================================================================

Begin optimization report for: boost::assign::list_inserter<boost::assign_detail::call_push_back<std::vector<std::string, std::allocator<std::string>>>, std::string>::operator()<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>(boost::assign::list_inserter<boost::assign_detail::call_push_back<std::vector<std::string, std::allocator<std::string>>>, std::string> *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /home/dmarce1/packages/intel64/include/boost/assign/list_inserter.hpp(272,20)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/assign/list_inserter.hpp(272,20)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U8b line 547 and U8b line 249
   remark #15346: vector dependence: assumed FLOW dependence between __first_320855 line 249 and __first_320855 line 547
LOOP END
===========================================================================

Begin optimization report for: boost::algorithm::iter_split<std::vector<std::string, std::allocator<std::string>>, const char *, boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(std::vector<std::string, std::allocator<std::string>> &, const char *&, boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/iter_find.hpp(181,13)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __mem_4443 line 547 and __mem_4443 line 68
   remark #15346: vector dependence: assumed FLOW dependence between __first_320855 line 68 and __first_320855 line 547
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::~vector(std::vector<std::string, std::allocator<std::string>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(424,9)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first_320855 line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first_320855 line 547
LOOP END
===========================================================================

Begin optimization report for: boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<boost::range_detail::range_const_iterator<boost::remove_reference<char [2]>::type>::type>>(boost::algorithm::detail::is_any_ofF<char> *, const boost::iterator_range<boost::range_detail::range_const_iterator<boost::remove_reference<char [2]>::type>::type> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/predefined_ops.h(42,26) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1901,4) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1904,4) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(329,46) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1674,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between Storage line 1675 and Storage line 135
   remark #15346: vector dependence: assumed FLOW dependence between Storage line 135 and Storage line 1675

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(393,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1844,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15382: vectorization support: call to function __builtin_memmove cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(578,6) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_453491 line 1846 and __last_453491 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.453329 line 1833 and __i.453329 line 1846

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1865,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_453491 line 1824 and __last_453491 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.453513 line 1833 and __i.453513 line 1824

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1844,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15382: vectorization support: call to function __builtin_memmove cannot be vectorized   [ /usr/include/c++/4.9.0/bits/stl_algobase.h(578,6) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __last_453491 line 1846 and __last_453491 line 1833
   remark #15346: vector dependence: assumed FLOW dependence between __i.453329 line 1833 and __i.453329 line 1846

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1827,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1943,7) inlined into /home/dmarce1/packages/intel64/include/boost/algorithm/string/detail/classification.hpp(103,21)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: std::__introsort_loop<boost::algorithm::detail::is_any_ofF<char>::set_value_type *, long, __gnu_cxx::__ops::_Iter_less_iter>(boost::algorithm::detail::is_any_ofF<char>::set_value_type *, boost::algorithm::detail::is_any_ofF<char>::set_value_type *, long, __gnu_cxx::__ops::_Iter_less_iter)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/predefined_ops.h(42,26) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1952,6)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1901,4) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1952,6)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1904,4) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1952,6)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(329,46) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1674,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first line 1675 and __first line 135
   remark #15346: vector dependence: assumed FLOW dependence between __first line 135 and __first line 1675

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(393,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(212,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_heap.h(129,7) inlined into /usr/include/c++/4.9.0/bits/stl_algo.h(1947,8)
      remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(1943,7)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15455: masked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 3.950 
   remark #15479: lightweight vector operations: 8 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
<Remainder>
   remark #15388: vectorization support: reference U184 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(79,4) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(78,2) inlined into /home/dmarce1/packages/intel64/include/boost/system/error_code.hpp(221,53)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_factory_hpx_M2L_interior_action::hpx_plugin_exporter_factory_hpx_M2L_interior_action(<unnamed>::hpx_plugin_exporter_factory_hpx_M2L_interior_action *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/exafmm.hpp(73,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into ../src/exafmm.hpp(73,1)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: <unnamed>::hpx_plugin_exporter_registry_hpx_M2L_interior_action::hpx_plugin_exporter_registry_hpx_M2L_interior_action(<unnamed>::hpx_plugin_exporter_registry_hpx_M2L_interior_action *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_algo.h(4162,22) inlined into ../src/exafmm.hpp(73,1)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into ../src/exafmm.hpp(73,1)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::string, std::allocator<std::string>>::pointer>(std::_Vector_base<std::string, std::allocator<std::string>>::pointer, std::_Vector_base<std::string, std::allocator<std::string>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between __first line 547 and  line 249
   remark #15346: vector dependence: assumed FLOW dependence between  line 249 and __first line 547
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::string_stub_dump<boost::error_info<boost::tag_original_exception_type, const std::type_info *>>(std::string *, const boost::error_info<boost::tag_original_exception_type, const std::type_info *> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/exception/detail/object_hex_dump.hpp(40,52) inlined into /home/dmarce1/packages/intel64/include/boost/exception/to_string_stub.hpp(85,27)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::add_msg(const hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type> *, const hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1259,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/cache_before_init.hpp(138,47)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/cache_before_init.hpp(139,22)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/cache_before_init.hpp(139,22)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U8b line 245 and U8b line 249
   remark #15346: vector dependence: assumed FLOW dependence between U84 line 249 and U84 line 245
LOOP END
===========================================================================

Begin optimization report for: hpx::util::logging::gather_holder<hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::self_type, hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::gather_type>::gather_holder(hpx::util::logging::gather_holder<hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::self_type, hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::gather_type> *, const hpx::util::logging::logger<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type, hpx::util::logging::default_>::self_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/basic_ios.h(454,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(34,9)
   remark #15389: vectorization support: reference this_232180 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/basic_ios.h(454,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(34,9)
   remark #15389: vectorization support: reference this_232180 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/streambuf(463,7) inlined into /home/dmarce1/packages/intel64/include/hpx/util/logging/detail/logger.hpp(34,9)
   remark #15389: vectorization support: reference this_232199 has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15301: BLOCK WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 9.000 
   remark #15478: estimated potential speedup: 1.140 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container> *, const boost::exception_detail::error_info_container_impl *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(105,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(119,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1216,4) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(159,26)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::release(const boost::exception_detail::error_info_container_impl *) const

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(148,21)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::diagnostic_information(const boost::exception_detail::error_info_container_impl *, const char *) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(113,91)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::get(boost::shared_ptr<boost::exception_detail::error_info_base> *, const boost::exception_detail::error_info_container_impl *, const boost::exception_detail::type_info_ &) const

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/typeinfo(116,35) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(94,61)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: boost::exception_detail::error_info_container_impl::set(boost::exception_detail::error_info_container_impl *, const boost::shared_ptr<boost::exception_detail::error_info_base> &, const boost::exception_detail::type_info_ &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/typeinfo(116,35) inlined into /home/dmarce1/packages/intel64/include/boost/exception/info.hpp(87,22)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer>(std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer, std::vector<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message, std::allocator<hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::message>>::pointer)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4)
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
   remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between U8b line 245 and U8b line 249
   remark #15346: vector dependence: assumed FLOW dependence between U84 line 249 and U84 line 245
LOOP END
===========================================================================

Begin optimization report for: std::vector<std::string, std::allocator<std::string>>::_M_range_initialize<boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default>>(std::vector<std::string, std::allocator<std::string>> *, boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default> *, boost::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<boost::iterator_value<boost::range_iterator<std::vector<std::string, std::allocator<std::string>>, void>::type>::type, boost::range_iterator<const char *, void>::type>, boost::algorithm::split_iterator<boost::range_iterator<const char *, void>::type>, boost::use_default, boost::use_default> *, std::input_iterator_tag)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/basic_string.h(215,53) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(1268,19)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(1268,6)
      remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.9.0/bits/stl_vector.h(1268,6)
      remark #15382: vectorization support: call to function __atomic_fetch_add_4 cannot be vectorized   [ /usr/include/c++/4.9.0/ext/atomicity.h(49,12) ]
      remark #15382: vectorization support: call to function _ZNSs4_Rep10_M_destroyERKSaIcE cannot be vectorized   [ /usr/include/c++/4.9.0/bits/basic_string.h(249,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between U8b line 547 and U8b line 249
      remark #15346: vector dependence: assumed FLOW dependence between __first_320855 line 249 and __first_320855 line 547
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::_M_get_insert_hint_unique_pos(std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::const_iterator, const std::_Rb_tree<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_type, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type, std::_Select1st<std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::value_type>, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::key_compare, std::map<hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info, std::less<hpx::util::logging::detail::thread_id_type>, std::allocator<std::pair<const hpx::util::logging::detail::thread_id_type, hpx::util::logging::detail::cache_before_init<hpx::util::logging::detail::find_gather_if_default<hpx::util::logging::logger_holder<hpx::util::logger_type>::gather_type>::msg_type>::thread_info>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1545,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1561,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1577,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1242,7)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(43,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_copy(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1216,4)
   remark #15526: loop was not vectorized: ASM code cannot be vectorized   [ /home/dmarce1/packages/intel64/include/boost/smart_ptr/detail/sp_counted_base_gcc_x86.hpp(59,0) ]
LOOP END
===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::_M_get_insert_hint_unique_pos(std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::const_iterator, const std::_Rb_tree<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_type, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type, std::_Select1st<std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::value_type>, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::key_compare, std::map<boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>, std::less<boost::exception_detail::type_info_>, std::allocator<std::pair<const boost::exception_detail::type_info_, boost::shared_ptr<boost::exception_detail::error_info_base>>>>::_Pair_alloc_type>::key_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1545,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1561,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/stl_tree.h(1441,7) inlined into /usr/include/c++/4.9.0/bits/stl_tree.h(1577,38)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================
