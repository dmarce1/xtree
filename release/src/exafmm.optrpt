
Begin optimization report for: exafmm_kernel<1L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(210,12) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 104 
   remark #15477: vector loop cost: 81.000 
   remark #15478: estimated potential speedup: 4.400 
   remark #15479: lightweight vector operations: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(210,12) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(244,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(245,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(244,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(245,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(244,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(263,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 4.180 
   remark #15479: lightweight vector operations: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(263,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(263,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(272,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(272,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(306,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(307,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(306,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(307,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(306,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(327,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.390 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(327,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(327,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(336,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(336,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(358,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(359,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(358,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(359,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(358,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(378,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.390 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(378,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(378,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(387,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(387,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(47,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
   <Multiversioned v2>
      remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
      remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 2.970 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 77 
      remark #15477: vector loop cost: 48.000 
      remark #15478: estimated potential speedup: 5.260 
      remark #15479: lightweight vector operations: 18 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(108,16) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(140,8)
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 6.000 
      remark #15478: estimated potential speedup: 5.000 
      remark #15479: lightweight vector operations: 6 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(140,8)
   <Remainder>
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(140,8)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(159,10)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 17 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 4.180 
      remark #15479: lightweight vector operations: 14 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(159,10)
   <Remainder>
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(159,10)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(166,8)
      remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
      remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(167,9) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 36.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15479: lightweight vector operations: 8 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(166,8)
   <Remainder>
      remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
      remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(167,9) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(166,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(180,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
   <Multiversioned v2>
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
      remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
      remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 7 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 2.960 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<Ipp64f>>::valarray(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<Ipp64f>>::~valarray(std::valarray<std::valarray<Ipp64f>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::__valarray_destroy_elements<std::valarray<Ipp64f>>(std::valarray<Ipp64f> *, std::valarray<Ipp64f> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::valarray<Ipp64f>::valarray(std::valarray<Ipp64f> *, const Ipp64f &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
   remark #15388: vectorization support: reference __b_62457 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 3.390 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
<Remainder>
   remark #15388: vectorization support: reference __b_62457 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_array.h(122,5) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(121,2) inlined into /usr/include/c++/4.9.0/valarray(617,7)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1296 
   remark #15477: vector loop cost: 260.500 
   remark #15478: estimated potential speedup: 4.960 
   remark #15479: lightweight vector operations: 222 
   remark #15482: vectorized math library calls: 7 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 1296 
      remark #15477: vector loop cost: 260.500 
      remark #15478: estimated potential speedup: 4.960 
      remark #15479: lightweight vector operations: 222 
      remark #15482: vectorized math library calls: 7 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15315: loop was not vectorized: low trip count
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 192.000 
            remark #15478: estimated potential speedup: 0.190 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15315: loop was not vectorized: low trip count
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 192.000 
            remark #15478: estimated potential speedup: 0.190 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 12 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1854 
   remark #15477: vector loop cost: 381.500 
   remark #15478: estimated potential speedup: 4.840 
   remark #15479: lightweight vector operations: 386 
   remark #15482: vectorized math library calls: 9 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 12 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 1854 
      remark #15477: vector loop cost: 381.500 
      remark #15478: estimated potential speedup: 4.840 
      remark #15479: lightweight vector operations: 386 
      remark #15482: vectorized math library calls: 9 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 20 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2536 
   remark #15477: vector loop cost: 532.250 
   remark #15478: estimated potential speedup: 4.750 
   remark #15479: lightweight vector operations: 599 
   remark #15482: vectorized math library calls: 11 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 20 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 2536 
      remark #15477: vector loop cost: 532.250 
      remark #15478: estimated potential speedup: 4.750 
      remark #15479: lightweight vector operations: 599 
      remark #15482: vectorized math library calls: 11 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.220 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 30 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3340 
   remark #15477: vector loop cost: 712.750 
   remark #15478: estimated potential speedup: 4.670 
   remark #15479: lightweight vector operations: 861 
   remark #15482: vectorized math library calls: 13 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 30 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 3340 
      remark #15477: vector loop cost: 712.750 
      remark #15478: estimated potential speedup: 4.670 
      remark #15479: lightweight vector operations: 861 
      remark #15482: vectorized math library calls: 13 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 42 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4269 
   remark #15477: vector loop cost: 923.000 
   remark #15478: estimated potential speedup: 4.600 
   remark #15479: lightweight vector operations: 1172 
   remark #15482: vectorized math library calls: 15 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 42 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4269 
      remark #15477: vector loop cost: 923.000 
      remark #15478: estimated potential speedup: 4.600 
      remark #15479: lightweight vector operations: 1172 
      remark #15482: vectorized math library calls: 15 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 56 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5321 
   remark #15477: vector loop cost: 1163.000 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 1532 
   remark #15482: vectorized math library calls: 17 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 56 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5321 
      remark #15477: vector loop cost: 1163.000 
      remark #15478: estimated potential speedup: 4.550 
      remark #15479: lightweight vector operations: 1532 
      remark #15482: vectorized math library calls: 17 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 986 
      remark #15477: vector loop cost: 216.750 
      remark #15478: estimated potential speedup: 4.540 
      remark #15479: lightweight vector operations: 192 
      remark #15482: vectorized math library calls: 4 
      remark #15487: type converts: 5 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 986 
      remark #15477: vector loop cost: 216.750 
      remark #15478: estimated potential speedup: 4.540 
      remark #15479: lightweight vector operations: 192 
      remark #15482: vectorized math library calls: 4 
      remark #15487: type converts: 5 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> *, const std::valarray<std::valarray<Ipp64f>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(191,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(195,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(196,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(197,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 986 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.540 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(194,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(204,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(219,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(238,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(239,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(245,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(244,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(247,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(248,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(264,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(263,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(273,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(274,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(272,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(277,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2M(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(299,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(299,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(300,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(301,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(307,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(306,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(309,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(310,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(328,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(327,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(337,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(338,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(336,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::L2L(std::valarray<std::valarray<Ipp64f>> &, const std::valarray<std::valarray<Ipp64f>> &, const std::valarray<Ipp64f> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2) inlined into ../src/exafmm.cpp(351,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 408 and _M_data line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3) inlined into ../src/exafmm.cpp(351,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 419 and _M_data line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 421 and _M_data line 419
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(352,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(353,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(359,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(358,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(361,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(362,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(379,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(378,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(388,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(389,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(387,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalMultipole(real, real, real, std::valarray<Ipp64f> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(402,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 408 and F64 line 421
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 408

   LOOP BEGIN at ../src/exafmm.cpp(416,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 419 and F64 line 421
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 421 and F64 line 419
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L_interior(std::valarray<std::valarray<Ipp64f>> *, const std::valarray<std::valarray<Ipp64f>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(46,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(47,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference m_buffer has aligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15389: vectorization support: reference F64 has unaligned access   [ ../src/exafmm.cpp(48,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(48,4) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.330 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(47,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(54,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
      remark #15388: vectorization support: reference l_buffer has aligned access   [ ../src/exafmm.cpp(55,4) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(54,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(68,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(72,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

      LOOP BEGIN at ../src/exafmm.cpp(73,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 78 and _M_data line 78

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between _M_data line 79 and _M_data line 81
            remark #15346: vector dependence: assumed FLOW dependence between _M_data line 81 and _M_data line 79
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(74,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(93,18) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(94,20) ]
      remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(95,18) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 9 
      remark #15449: unmasked aligned unit stride stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 986 
      remark #15477: vector loop cost: 216.750 
      remark #15478: estimated potential speedup: 4.540 
      remark #15479: lightweight vector operations: 192 
      remark #15482: vectorized math library calls: 4 
      remark #15487: type converts: 5 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(92,6)
   <Remainder>

      LOOP BEGIN at ../src/exafmm.cpp(102,7)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ../src/exafmm.cpp(117,8)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(134,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(135,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15399: vectorization support: unroll factor set to 4
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 5.000 
            remark #15479: lightweight vector operations: 6 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,21) ]
            remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(141,12) ]
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(140,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(143,8)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(144,9)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(160,11) ]
                  remark #15301: SIMD LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 6 
                  remark #15449: unmasked aligned unit stride stores: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 34 
                  remark #15477: vector loop cost: 5.500 
                  remark #15478: estimated potential speedup: 6.130 
                  remark #15479: lightweight vector operations: 22 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ../src/exafmm.cpp(159,10)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.480 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(167,9) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,70) ]
            remark #15389: vectorization support: reference _M_data has unaligned access   [ ../src/exafmm.cpp(168,9) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(168,9) ]
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15458: masked indexed (or gather) loads: 2 
            remark #15459: masked indexed (or scatter) stores: 2 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 23.500 
            remark #15478: estimated potential speedup: 1.520 
            remark #15479: lightweight vector operations: 29 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ../src/exafmm.cpp(166,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(179,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(180,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15389: vectorization support: reference l_buffer has unaligned access   [ ../src/exafmm.cpp(181,8) ]
         remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(181,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 4.750 
         remark #15478: estimated potential speedup: 3.320 
         remark #15479: lightweight vector operations: 4 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(180,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../src/exafmm.cpp(62,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at ../src/exafmm.cpp(65,4)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(438,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _M_elems line 439 and _M_elems line 439
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(442,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(443,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(447,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(450,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(453,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(456,4) inlined into ../src/exafmm.cpp(434,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(463,2) inlined into ../src/exafmm.cpp(434,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(464,3) inlined into ../src/exafmm.cpp(434,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

      LOOP BEGIN at ../src/exafmm.cpp(465,4) inlined into ../src/exafmm.cpp(434,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471
         remark #15346: vector dependence: assumed OUTPUT dependence between _M_elems line 471 and _M_elems line 471

         LOOP BEGIN at ../src/exafmm.cpp(466,5) inlined into ../src/exafmm.cpp(434,19)
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ /usr/include/c++/4.9.0/complex(1270,2) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(471,12) ]
            remark #15389: vectorization support: reference _M_elems has unaligned access   [ ../src/exafmm.cpp(472,12) ]
            remark #15381: vectorization support: unaligned access used inside loop body   [ ../src/exafmm.cpp(472,12) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15455: masked aligned unit stride stores: 1 
            remark #15456: masked unaligned unit stride loads: 2 
            remark #15457: masked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 40 
            remark #15477: vector loop cost: 191.000 
            remark #15478: estimated potential speedup: 0.210 
            remark #15479: lightweight vector operations: 110 
            remark #15480: medium-overhead vector operations: 3 
            remark #15481: heavy-overhead vector operations: 3 
            remark #15482: vectorized math library calls: 3 
            remark #15487: type converts: 2 
            remark #15488: --- end vector loop cost summary ---
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
