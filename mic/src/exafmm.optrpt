
Begin optimization report for: exafmm_kernel<1L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(233,12) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 104 
   remark #15477: vector loop cost: 81.000 
   remark #15478: estimated potential speedup: 4.400 
   remark #15479: lightweight vector operations: 21 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(233,12) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(267,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(268,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(267,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(268,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(267,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(286,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 17 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 4.180 
   remark #15479: lightweight vector operations: 14 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(286,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(286,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(295,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(295,4)
<Remainder>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: std::valarray<std::valarray<real>>::~valarray(std::valarray<std::valarray<real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into /usr/include/c++/4.9.0/valarray(702,7)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(329,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(330,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(329,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(330,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(329,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(350,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.390 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(350,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(350,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(359,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(359,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(381,4)
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(382,8) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 5.000 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(381,4)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(382,8) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(381,4)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(401,6)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.390 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(401,6)
<Remainder>
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(401,6)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(410,4)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 7.330 
   remark #15479: lightweight vector operations: 6 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(410,4)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<1L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(61,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(203,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1300 
   remark #15477: vector loop cost: 260.500 
   remark #15478: estimated potential speedup: 4.980 
   remark #15479: lightweight vector operations: 222 
   remark #15482: vectorized math library calls: 7 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<2L>::exafmm_kernel(exafmm_kernel<2L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 12 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 1862 
   remark #15477: vector loop cost: 381.500 
   remark #15478: estimated potential speedup: 4.860 
   remark #15479: lightweight vector operations: 386 
   remark #15482: vectorized math library calls: 9 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<3L>::exafmm_kernel(exafmm_kernel<3L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 20 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2548 
   remark #15477: vector loop cost: 532.250 
   remark #15478: estimated potential speedup: 4.770 
   remark #15479: lightweight vector operations: 599 
   remark #15482: vectorized math library calls: 11 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<4L>::exafmm_kernel(exafmm_kernel<4L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 30 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3360 
   remark #15477: vector loop cost: 712.750 
   remark #15478: estimated potential speedup: 4.690 
   remark #15479: lightweight vector operations: 861 
   remark #15482: vectorized math library calls: 13 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<5L>::exafmm_kernel(exafmm_kernel<5L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 42 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4296 
   remark #15477: vector loop cost: 923.000 
   remark #15478: estimated potential speedup: 4.630 
   remark #15479: lightweight vector operations: 1172 
   remark #15482: vectorized math library calls: 15 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<6L>::exafmm_kernel(exafmm_kernel<6L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 56 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5357 
   remark #15477: vector loop cost: 1163.000 
   remark #15478: estimated potential speedup: 4.590 
   remark #15479: lightweight vector operations: 1532 
   remark #15482: vectorized math library calls: 17 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<7L>::exafmm_kernel(exafmm_kernel<7L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 988 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<8L>::exafmm_kernel(exafmm_kernel<8L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 988 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<9L>::exafmm_kernel(exafmm_kernel<9L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L(std::valarray<std::valarray<real>> &, const std::valarray<real> *, const std::valarray<std::valarray<real>> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(214,65)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(218,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(219,16) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(220,14) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 9 
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 988 
   remark #15477: vector loop cost: 216.750 
   remark #15478: estimated potential speedup: 4.550 
   remark #15479: lightweight vector operations: 192 
   remark #15482: vectorized math library calls: 4 
   remark #15487: type converts: 5 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(217,2)
<Remainder>

   LOOP BEGIN at ../src/exafmm.cpp(227,3)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at ../src/exafmm.cpp(242,4)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(261,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(262,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(268,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(267,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(270,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(271,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(287,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(286,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(296,7) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(297,36) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(295,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(207,2) inlined into ../src/exafmm.cpp(300,2)
   remark #15382: vectorization support: call to function _ZdlPv cannot be vectorized   [ /usr/include/c++/4.9.0/bits/valarray_array.h(66,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::cart2sph(real &, real &, real &, std::valarray<real> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference __s.30930 has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(306,25)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2M(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(321,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(322,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(322,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(323,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(324,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(330,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(329,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(332,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(333,57)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(351,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(350,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(360,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(361,42) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(359,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::L2L(std::valarray<std::valarray<real>> &, const std::valarray<std::valarray<real>> &, const std::valarray<real> &, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Peeled>
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: REVERSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 4.510 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15388: vectorization support: reference _M_data has aligned access   [ /usr/include/c++/4.9.0/bits/valarray_after.h(299,6) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_after.h(298,4) inlined into ../src/exafmm.cpp(373,2)
<Remainder>
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(425,2) inlined into ../src/exafmm.cpp(374,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 431 and _M_data line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3) inlined into ../src/exafmm.cpp(374,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 442 and _M_data line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between _M_data line 444 and _M_data line 442
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(375,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(376,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 5.000 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,17) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(382,8) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(381,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(384,4)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../src/exafmm.cpp(385,5)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(402,7) ]
               remark #15301: SIMD LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 6 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 34 
               remark #15477: vector loop cost: 5.500 
               remark #15478: estimated potential speedup: 6.130 
               remark #15479: lightweight vector operations: 22 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ../src/exafmm.cpp(401,6)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(411,9) ]
         remark #15388: vectorization support: reference F64 has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15388: vectorization support: reference _M_data has aligned access   [ ../src/exafmm.cpp(412,38) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 7.330 
         remark #15479: lightweight vector operations: 6 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(410,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::evalMultipole(real, real, real, std::valarray<real> &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(425,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 431 and F64 line 444
   remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 431

   LOOP BEGIN at ../src/exafmm.cpp(439,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 442 and F64 line 444
      remark #15346: vector dependence: assumed OUTPUT dependence between F64 line 444 and F64 line 442
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::M2L_interior(std::valarray<std::valarray<real>> *, const std::valarray<std::valarray<real>> &, real, int64_t, bool, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.9.0/bits/valarray_array.h(110,2) inlined into ../src/exafmm.cpp(55,64)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(60,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(62,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between m_buffer line 61 and m_buffer line 62
   remark #15346: vector dependence: assumed FLOW dependence between m_buffer line 62 and m_buffer line 61

   LOOP BEGIN at ../src/exafmm.cpp(61,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(61,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(202,2)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ ../src/exafmm.cpp(204,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between l_buffer line 203 and F64 line 204
   remark #15346: vector dependence: assumed FLOW dependence between F64 line 204 and l_buffer line 203

   LOOP BEGIN at ../src/exafmm.cpp(203,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(203,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: exafmm_kernel<10L>::exafmm_kernel(exafmm_kernel<10L> *const)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../src/exafmm.cpp(465,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between factorial line 466 and factorial line 466
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(469,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../src/exafmm.cpp(470,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(474,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(477,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(480,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 6.000 
         remark #15478: estimated potential speedup: 3.350 
         remark #15479: lightweight vector operations: 6 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../src/exafmm.cpp(483,4) inlined into ../src/exafmm.cpp(457,19)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../src/exafmm.cpp(490,2) inlined into ../src/exafmm.cpp(457,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at ../src/exafmm.cpp(491,3) inlined into ../src/exafmm.cpp(457,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
      remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

      LOOP BEGIN at ../src/exafmm.cpp(492,4) inlined into ../src/exafmm.cpp(457,19)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
         remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270

         LOOP BEGIN at ../src/exafmm.cpp(493,5) inlined into ../src/exafmm.cpp(457,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between Anm line 1270 and Cnm_i line 499
            remark #15346: vector dependence: assumed FLOW dependence between Cnm_i line 499 and Anm line 1270
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
